// source: api/proto/tournament_service/tournament_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var api_proto_realtime_realtime_pb = require('../../../api/proto/realtime/realtime_pb.js');
goog.object.extend(proto, api_proto_realtime_realtime_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.tournament_service.CheckinRequest', null, global);
goog.exportSymbol('proto.tournament_service.ClubSessionResponse', null, global);
goog.exportSymbol('proto.tournament_service.ClubSessionsResponse', null, global);
goog.exportSymbol('proto.tournament_service.FinishTournamentRequest', null, global);
goog.exportSymbol('proto.tournament_service.GetTournamentMetadataRequest', null, global);
goog.exportSymbol('proto.tournament_service.GetTournamentRequest', null, global);
goog.exportSymbol('proto.tournament_service.NewClubSessionRequest', null, global);
goog.exportSymbol('proto.tournament_service.NewTournamentRequest', null, global);
goog.exportSymbol('proto.tournament_service.NewTournamentResponse', null, global);
goog.exportSymbol('proto.tournament_service.PairRoundRequest', null, global);
goog.exportSymbol('proto.tournament_service.RecentClubSessionsRequest', null, global);
goog.exportSymbol('proto.tournament_service.RecentGamesRequest', null, global);
goog.exportSymbol('proto.tournament_service.RecentGamesResponse', null, global);
goog.exportSymbol('proto.tournament_service.SetTournamentMetadataRequest', null, global);
goog.exportSymbol('proto.tournament_service.SingleRoundControlsRequest', null, global);
goog.exportSymbol('proto.tournament_service.StartRoundRequest', null, global);
goog.exportSymbol('proto.tournament_service.TType', null, global);
goog.exportSymbol('proto.tournament_service.TournamentDivisionRequest', null, global);
goog.exportSymbol('proto.tournament_service.TournamentMetadata', null, global);
goog.exportSymbol('proto.tournament_service.TournamentMetadataResponse', null, global);
goog.exportSymbol('proto.tournament_service.TournamentPairingRequest', null, global);
goog.exportSymbol('proto.tournament_service.TournamentPairingsRequest', null, global);
goog.exportSymbol('proto.tournament_service.TournamentResponse', null, global);
goog.exportSymbol('proto.tournament_service.TournamentResultOverrideRequest', null, global);
goog.exportSymbol('proto.tournament_service.TournamentStartRoundCountdownRequest', null, global);
goog.exportSymbol('proto.tournament_service.UncheckInRequest', null, global);
goog.exportSymbol('proto.tournament_service.UnstartTournamentRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.StartRoundRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tournament_service.StartRoundRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.StartRoundRequest.displayName = 'proto.tournament_service.StartRoundRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.NewTournamentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tournament_service.NewTournamentRequest.repeatedFields_, null);
};
goog.inherits(proto.tournament_service.NewTournamentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.NewTournamentRequest.displayName = 'proto.tournament_service.NewTournamentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.TournamentMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tournament_service.TournamentMetadata.repeatedFields_, null);
};
goog.inherits(proto.tournament_service.TournamentMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.TournamentMetadata.displayName = 'proto.tournament_service.TournamentMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.SetTournamentMetadataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tournament_service.SetTournamentMetadataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.SetTournamentMetadataRequest.displayName = 'proto.tournament_service.SetTournamentMetadataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.SingleRoundControlsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tournament_service.SingleRoundControlsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.SingleRoundControlsRequest.displayName = 'proto.tournament_service.SingleRoundControlsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.PairRoundRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tournament_service.PairRoundRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.PairRoundRequest.displayName = 'proto.tournament_service.PairRoundRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.TournamentDivisionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tournament_service.TournamentDivisionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.TournamentDivisionRequest.displayName = 'proto.tournament_service.TournamentDivisionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.TournamentPairingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tournament_service.TournamentPairingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.TournamentPairingRequest.displayName = 'proto.tournament_service.TournamentPairingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.TournamentPairingsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tournament_service.TournamentPairingsRequest.repeatedFields_, null);
};
goog.inherits(proto.tournament_service.TournamentPairingsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.TournamentPairingsRequest.displayName = 'proto.tournament_service.TournamentPairingsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.TournamentResultOverrideRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tournament_service.TournamentResultOverrideRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.TournamentResultOverrideRequest.displayName = 'proto.tournament_service.TournamentResultOverrideRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.TournamentStartRoundCountdownRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tournament_service.TournamentStartRoundCountdownRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.TournamentStartRoundCountdownRequest.displayName = 'proto.tournament_service.TournamentStartRoundCountdownRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.TournamentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tournament_service.TournamentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.TournamentResponse.displayName = 'proto.tournament_service.TournamentResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.NewTournamentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tournament_service.NewTournamentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.NewTournamentResponse.displayName = 'proto.tournament_service.NewTournamentResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.GetTournamentMetadataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tournament_service.GetTournamentMetadataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.GetTournamentMetadataRequest.displayName = 'proto.tournament_service.GetTournamentMetadataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.GetTournamentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tournament_service.GetTournamentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.GetTournamentRequest.displayName = 'proto.tournament_service.GetTournamentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.FinishTournamentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tournament_service.FinishTournamentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.FinishTournamentRequest.displayName = 'proto.tournament_service.FinishTournamentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.TournamentMetadataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tournament_service.TournamentMetadataResponse.repeatedFields_, null);
};
goog.inherits(proto.tournament_service.TournamentMetadataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.TournamentMetadataResponse.displayName = 'proto.tournament_service.TournamentMetadataResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.RecentGamesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tournament_service.RecentGamesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.RecentGamesRequest.displayName = 'proto.tournament_service.RecentGamesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.RecentGamesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tournament_service.RecentGamesResponse.repeatedFields_, null);
};
goog.inherits(proto.tournament_service.RecentGamesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.RecentGamesResponse.displayName = 'proto.tournament_service.RecentGamesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.UnstartTournamentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tournament_service.UnstartTournamentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.UnstartTournamentRequest.displayName = 'proto.tournament_service.UnstartTournamentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.UncheckInRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tournament_service.UncheckInRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.UncheckInRequest.displayName = 'proto.tournament_service.UncheckInRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.CheckinRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tournament_service.CheckinRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.CheckinRequest.displayName = 'proto.tournament_service.CheckinRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.NewClubSessionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tournament_service.NewClubSessionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.NewClubSessionRequest.displayName = 'proto.tournament_service.NewClubSessionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.ClubSessionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tournament_service.ClubSessionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.ClubSessionResponse.displayName = 'proto.tournament_service.ClubSessionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.RecentClubSessionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tournament_service.RecentClubSessionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.RecentClubSessionsRequest.displayName = 'proto.tournament_service.RecentClubSessionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tournament_service.ClubSessionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tournament_service.ClubSessionsResponse.repeatedFields_, null);
};
goog.inherits(proto.tournament_service.ClubSessionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tournament_service.ClubSessionsResponse.displayName = 'proto.tournament_service.ClubSessionsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.StartRoundRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.StartRoundRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.StartRoundRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.StartRoundRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tournamentId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    round: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.StartRoundRequest}
 */
proto.tournament_service.StartRoundRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.StartRoundRequest;
  return proto.tournament_service.StartRoundRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.StartRoundRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.StartRoundRequest}
 */
proto.tournament_service.StartRoundRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTournamentId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.StartRoundRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.StartRoundRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.StartRoundRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.StartRoundRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTournamentId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string tournament_id = 1;
 * @return {string}
 */
proto.tournament_service.StartRoundRequest.prototype.getTournamentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.StartRoundRequest} returns this
 */
proto.tournament_service.StartRoundRequest.prototype.setTournamentId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 round = 2;
 * @return {number}
 */
proto.tournament_service.StartRoundRequest.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tournament_service.StartRoundRequest} returns this
 */
proto.tournament_service.StartRoundRequest.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tournament_service.NewTournamentRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.NewTournamentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.NewTournamentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.NewTournamentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.NewTournamentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    slug: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    directorUsernamesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    type: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.NewTournamentRequest}
 */
proto.tournament_service.NewTournamentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.NewTournamentRequest;
  return proto.tournament_service.NewTournamentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.NewTournamentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.NewTournamentRequest}
 */
proto.tournament_service.NewTournamentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addDirectorUsernames(value);
      break;
    case 5:
      var value = /** @type {!proto.tournament_service.TType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.NewTournamentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.NewTournamentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.NewTournamentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.NewTournamentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDirectorUsernamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional string slug = 1;
 * @return {string}
 */
proto.tournament_service.NewTournamentRequest.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.NewTournamentRequest} returns this
 */
proto.tournament_service.NewTournamentRequest.prototype.setSlug = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.tournament_service.NewTournamentRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.NewTournamentRequest} returns this
 */
proto.tournament_service.NewTournamentRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.tournament_service.NewTournamentRequest.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.NewTournamentRequest} returns this
 */
proto.tournament_service.NewTournamentRequest.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string director_usernames = 4;
 * @return {!Array<string>}
 */
proto.tournament_service.NewTournamentRequest.prototype.getDirectorUsernamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tournament_service.NewTournamentRequest} returns this
 */
proto.tournament_service.NewTournamentRequest.prototype.setDirectorUsernamesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tournament_service.NewTournamentRequest} returns this
 */
proto.tournament_service.NewTournamentRequest.prototype.addDirectorUsernames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tournament_service.NewTournamentRequest} returns this
 */
proto.tournament_service.NewTournamentRequest.prototype.clearDirectorUsernamesList = function() {
  return this.setDirectorUsernamesList([]);
};


/**
 * optional TType type = 5;
 * @return {!proto.tournament_service.TType}
 */
proto.tournament_service.NewTournamentRequest.prototype.getType = function() {
  return /** @type {!proto.tournament_service.TType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.tournament_service.TType} value
 * @return {!proto.tournament_service.NewTournamentRequest} returns this
 */
proto.tournament_service.NewTournamentRequest.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tournament_service.TournamentMetadata.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.TournamentMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.TournamentMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.TournamentMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.TournamentMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    slug: jspb.Message.getFieldWithDefault(msg, 4, ""),
    type: jspb.Message.getFieldWithDefault(msg, 5, 0),
    disclaimer: jspb.Message.getFieldWithDefault(msg, 6, ""),
    tileStyle: jspb.Message.getFieldWithDefault(msg, 7, ""),
    boardStyle: jspb.Message.getFieldWithDefault(msg, 8, ""),
    defaultClubSettings: (f = msg.getDefaultClubSettings()) && api_proto_realtime_realtime_pb.GameRequest.toObject(includeInstance, f),
    freeformClubSettingFieldsList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    password: jspb.Message.getFieldWithDefault(msg, 11, ""),
    logo: jspb.Message.getFieldWithDefault(msg, 12, ""),
    color: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.TournamentMetadata}
 */
proto.tournament_service.TournamentMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.TournamentMetadata;
  return proto.tournament_service.TournamentMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.TournamentMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.TournamentMetadata}
 */
proto.tournament_service.TournamentMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    case 5:
      var value = /** @type {!proto.tournament_service.TType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisclaimer(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTileStyle(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoardStyle(value);
      break;
    case 9:
      var value = new api_proto_realtime_realtime_pb.GameRequest;
      reader.readMessage(value,api_proto_realtime_realtime_pb.GameRequest.deserializeBinaryFromReader);
      msg.setDefaultClubSettings(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addFreeformClubSettingFields(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogo(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.TournamentMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.TournamentMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.TournamentMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.TournamentMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getDisclaimer();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTileStyle();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getBoardStyle();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDefaultClubSettings();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      api_proto_realtime_realtime_pb.GameRequest.serializeBinaryToWriter
    );
  }
  f = message.getFreeformClubSettingFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getLogo();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getColor();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tournament_service.TournamentMetadata.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.TournamentMetadata} returns this
 */
proto.tournament_service.TournamentMetadata.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.tournament_service.TournamentMetadata.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.TournamentMetadata} returns this
 */
proto.tournament_service.TournamentMetadata.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.tournament_service.TournamentMetadata.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.TournamentMetadata} returns this
 */
proto.tournament_service.TournamentMetadata.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string slug = 4;
 * @return {string}
 */
proto.tournament_service.TournamentMetadata.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.TournamentMetadata} returns this
 */
proto.tournament_service.TournamentMetadata.prototype.setSlug = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional TType type = 5;
 * @return {!proto.tournament_service.TType}
 */
proto.tournament_service.TournamentMetadata.prototype.getType = function() {
  return /** @type {!proto.tournament_service.TType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.tournament_service.TType} value
 * @return {!proto.tournament_service.TournamentMetadata} returns this
 */
proto.tournament_service.TournamentMetadata.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string disclaimer = 6;
 * @return {string}
 */
proto.tournament_service.TournamentMetadata.prototype.getDisclaimer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.TournamentMetadata} returns this
 */
proto.tournament_service.TournamentMetadata.prototype.setDisclaimer = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string tile_style = 7;
 * @return {string}
 */
proto.tournament_service.TournamentMetadata.prototype.getTileStyle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.TournamentMetadata} returns this
 */
proto.tournament_service.TournamentMetadata.prototype.setTileStyle = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string board_style = 8;
 * @return {string}
 */
proto.tournament_service.TournamentMetadata.prototype.getBoardStyle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.TournamentMetadata} returns this
 */
proto.tournament_service.TournamentMetadata.prototype.setBoardStyle = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional liwords.GameRequest default_club_settings = 9;
 * @return {?proto.liwords.GameRequest}
 */
proto.tournament_service.TournamentMetadata.prototype.getDefaultClubSettings = function() {
  return /** @type{?proto.liwords.GameRequest} */ (
    jspb.Message.getWrapperField(this, api_proto_realtime_realtime_pb.GameRequest, 9));
};


/**
 * @param {?proto.liwords.GameRequest|undefined} value
 * @return {!proto.tournament_service.TournamentMetadata} returns this
*/
proto.tournament_service.TournamentMetadata.prototype.setDefaultClubSettings = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tournament_service.TournamentMetadata} returns this
 */
proto.tournament_service.TournamentMetadata.prototype.clearDefaultClubSettings = function() {
  return this.setDefaultClubSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tournament_service.TournamentMetadata.prototype.hasDefaultClubSettings = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated string freeform_club_setting_fields = 10;
 * @return {!Array<string>}
 */
proto.tournament_service.TournamentMetadata.prototype.getFreeformClubSettingFieldsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tournament_service.TournamentMetadata} returns this
 */
proto.tournament_service.TournamentMetadata.prototype.setFreeformClubSettingFieldsList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tournament_service.TournamentMetadata} returns this
 */
proto.tournament_service.TournamentMetadata.prototype.addFreeformClubSettingFields = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tournament_service.TournamentMetadata} returns this
 */
proto.tournament_service.TournamentMetadata.prototype.clearFreeformClubSettingFieldsList = function() {
  return this.setFreeformClubSettingFieldsList([]);
};


/**
 * optional string password = 11;
 * @return {string}
 */
proto.tournament_service.TournamentMetadata.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.TournamentMetadata} returns this
 */
proto.tournament_service.TournamentMetadata.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string logo = 12;
 * @return {string}
 */
proto.tournament_service.TournamentMetadata.prototype.getLogo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.TournamentMetadata} returns this
 */
proto.tournament_service.TournamentMetadata.prototype.setLogo = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string color = 13;
 * @return {string}
 */
proto.tournament_service.TournamentMetadata.prototype.getColor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.TournamentMetadata} returns this
 */
proto.tournament_service.TournamentMetadata.prototype.setColor = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.SetTournamentMetadataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.SetTournamentMetadataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.SetTournamentMetadataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.SetTournamentMetadataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.tournament_service.TournamentMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.SetTournamentMetadataRequest}
 */
proto.tournament_service.SetTournamentMetadataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.SetTournamentMetadataRequest;
  return proto.tournament_service.SetTournamentMetadataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.SetTournamentMetadataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.SetTournamentMetadataRequest}
 */
proto.tournament_service.SetTournamentMetadataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tournament_service.TournamentMetadata;
      reader.readMessage(value,proto.tournament_service.TournamentMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.SetTournamentMetadataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.SetTournamentMetadataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.SetTournamentMetadataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.SetTournamentMetadataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tournament_service.TournamentMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional TournamentMetadata metadata = 1;
 * @return {?proto.tournament_service.TournamentMetadata}
 */
proto.tournament_service.SetTournamentMetadataRequest.prototype.getMetadata = function() {
  return /** @type{?proto.tournament_service.TournamentMetadata} */ (
    jspb.Message.getWrapperField(this, proto.tournament_service.TournamentMetadata, 1));
};


/**
 * @param {?proto.tournament_service.TournamentMetadata|undefined} value
 * @return {!proto.tournament_service.SetTournamentMetadataRequest} returns this
*/
proto.tournament_service.SetTournamentMetadataRequest.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tournament_service.SetTournamentMetadataRequest} returns this
 */
proto.tournament_service.SetTournamentMetadataRequest.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tournament_service.SetTournamentMetadataRequest.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.SingleRoundControlsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.SingleRoundControlsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.SingleRoundControlsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.SingleRoundControlsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    division: jspb.Message.getFieldWithDefault(msg, 2, ""),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    roundControls: (f = msg.getRoundControls()) && api_proto_realtime_realtime_pb.RoundControl.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.SingleRoundControlsRequest}
 */
proto.tournament_service.SingleRoundControlsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.SingleRoundControlsRequest;
  return proto.tournament_service.SingleRoundControlsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.SingleRoundControlsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.SingleRoundControlsRequest}
 */
proto.tournament_service.SingleRoundControlsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDivision(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 4:
      var value = new api_proto_realtime_realtime_pb.RoundControl;
      reader.readMessage(value,api_proto_realtime_realtime_pb.RoundControl.deserializeBinaryFromReader);
      msg.setRoundControls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.SingleRoundControlsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.SingleRoundControlsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.SingleRoundControlsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.SingleRoundControlsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDivision();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getRoundControls();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      api_proto_realtime_realtime_pb.RoundControl.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tournament_service.SingleRoundControlsRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.SingleRoundControlsRequest} returns this
 */
proto.tournament_service.SingleRoundControlsRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string division = 2;
 * @return {string}
 */
proto.tournament_service.SingleRoundControlsRequest.prototype.getDivision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.SingleRoundControlsRequest} returns this
 */
proto.tournament_service.SingleRoundControlsRequest.prototype.setDivision = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 round = 3;
 * @return {number}
 */
proto.tournament_service.SingleRoundControlsRequest.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tournament_service.SingleRoundControlsRequest} returns this
 */
proto.tournament_service.SingleRoundControlsRequest.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional liwords.RoundControl round_controls = 4;
 * @return {?proto.liwords.RoundControl}
 */
proto.tournament_service.SingleRoundControlsRequest.prototype.getRoundControls = function() {
  return /** @type{?proto.liwords.RoundControl} */ (
    jspb.Message.getWrapperField(this, api_proto_realtime_realtime_pb.RoundControl, 4));
};


/**
 * @param {?proto.liwords.RoundControl|undefined} value
 * @return {!proto.tournament_service.SingleRoundControlsRequest} returns this
*/
proto.tournament_service.SingleRoundControlsRequest.prototype.setRoundControls = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tournament_service.SingleRoundControlsRequest} returns this
 */
proto.tournament_service.SingleRoundControlsRequest.prototype.clearRoundControls = function() {
  return this.setRoundControls(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tournament_service.SingleRoundControlsRequest.prototype.hasRoundControls = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.PairRoundRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.PairRoundRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.PairRoundRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.PairRoundRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    division: jspb.Message.getFieldWithDefault(msg, 2, ""),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    overwriteByes: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    deletePairings: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.PairRoundRequest}
 */
proto.tournament_service.PairRoundRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.PairRoundRequest;
  return proto.tournament_service.PairRoundRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.PairRoundRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.PairRoundRequest}
 */
proto.tournament_service.PairRoundRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDivision(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOverwriteByes(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeletePairings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.PairRoundRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.PairRoundRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.PairRoundRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.PairRoundRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDivision();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getOverwriteByes();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getDeletePairings();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tournament_service.PairRoundRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.PairRoundRequest} returns this
 */
proto.tournament_service.PairRoundRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string division = 2;
 * @return {string}
 */
proto.tournament_service.PairRoundRequest.prototype.getDivision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.PairRoundRequest} returns this
 */
proto.tournament_service.PairRoundRequest.prototype.setDivision = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 round = 3;
 * @return {number}
 */
proto.tournament_service.PairRoundRequest.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tournament_service.PairRoundRequest} returns this
 */
proto.tournament_service.PairRoundRequest.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool overwrite_byes = 4;
 * @return {boolean}
 */
proto.tournament_service.PairRoundRequest.prototype.getOverwriteByes = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tournament_service.PairRoundRequest} returns this
 */
proto.tournament_service.PairRoundRequest.prototype.setOverwriteByes = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool delete_pairings = 5;
 * @return {boolean}
 */
proto.tournament_service.PairRoundRequest.prototype.getDeletePairings = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tournament_service.PairRoundRequest} returns this
 */
proto.tournament_service.PairRoundRequest.prototype.setDeletePairings = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.TournamentDivisionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.TournamentDivisionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.TournamentDivisionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.TournamentDivisionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    division: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.TournamentDivisionRequest}
 */
proto.tournament_service.TournamentDivisionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.TournamentDivisionRequest;
  return proto.tournament_service.TournamentDivisionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.TournamentDivisionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.TournamentDivisionRequest}
 */
proto.tournament_service.TournamentDivisionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDivision(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.TournamentDivisionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.TournamentDivisionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.TournamentDivisionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.TournamentDivisionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDivision();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tournament_service.TournamentDivisionRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.TournamentDivisionRequest} returns this
 */
proto.tournament_service.TournamentDivisionRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string division = 2;
 * @return {string}
 */
proto.tournament_service.TournamentDivisionRequest.prototype.getDivision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.TournamentDivisionRequest} returns this
 */
proto.tournament_service.TournamentDivisionRequest.prototype.setDivision = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.TournamentPairingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.TournamentPairingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.TournamentPairingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.TournamentPairingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerOneId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playerTwoId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.TournamentPairingRequest}
 */
proto.tournament_service.TournamentPairingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.TournamentPairingRequest;
  return proto.tournament_service.TournamentPairingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.TournamentPairingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.TournamentPairingRequest}
 */
proto.tournament_service.TournamentPairingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerOneId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerTwoId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.TournamentPairingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.TournamentPairingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.TournamentPairingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.TournamentPairingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerOneId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayerTwoId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string player_one_id = 1;
 * @return {string}
 */
proto.tournament_service.TournamentPairingRequest.prototype.getPlayerOneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.TournamentPairingRequest} returns this
 */
proto.tournament_service.TournamentPairingRequest.prototype.setPlayerOneId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string player_two_id = 2;
 * @return {string}
 */
proto.tournament_service.TournamentPairingRequest.prototype.getPlayerTwoId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.TournamentPairingRequest} returns this
 */
proto.tournament_service.TournamentPairingRequest.prototype.setPlayerTwoId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 round = 3;
 * @return {number}
 */
proto.tournament_service.TournamentPairingRequest.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tournament_service.TournamentPairingRequest} returns this
 */
proto.tournament_service.TournamentPairingRequest.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tournament_service.TournamentPairingsRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.TournamentPairingsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.TournamentPairingsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.TournamentPairingsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.TournamentPairingsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    division: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pairingsList: jspb.Message.toObjectList(msg.getPairingsList(),
    proto.tournament_service.TournamentPairingRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.TournamentPairingsRequest}
 */
proto.tournament_service.TournamentPairingsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.TournamentPairingsRequest;
  return proto.tournament_service.TournamentPairingsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.TournamentPairingsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.TournamentPairingsRequest}
 */
proto.tournament_service.TournamentPairingsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDivision(value);
      break;
    case 3:
      var value = new proto.tournament_service.TournamentPairingRequest;
      reader.readMessage(value,proto.tournament_service.TournamentPairingRequest.deserializeBinaryFromReader);
      msg.addPairings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.TournamentPairingsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.TournamentPairingsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.TournamentPairingsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.TournamentPairingsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDivision();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPairingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.tournament_service.TournamentPairingRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tournament_service.TournamentPairingsRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.TournamentPairingsRequest} returns this
 */
proto.tournament_service.TournamentPairingsRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string division = 2;
 * @return {string}
 */
proto.tournament_service.TournamentPairingsRequest.prototype.getDivision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.TournamentPairingsRequest} returns this
 */
proto.tournament_service.TournamentPairingsRequest.prototype.setDivision = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated TournamentPairingRequest pairings = 3;
 * @return {!Array<!proto.tournament_service.TournamentPairingRequest>}
 */
proto.tournament_service.TournamentPairingsRequest.prototype.getPairingsList = function() {
  return /** @type{!Array<!proto.tournament_service.TournamentPairingRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tournament_service.TournamentPairingRequest, 3));
};


/**
 * @param {!Array<!proto.tournament_service.TournamentPairingRequest>} value
 * @return {!proto.tournament_service.TournamentPairingsRequest} returns this
*/
proto.tournament_service.TournamentPairingsRequest.prototype.setPairingsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.tournament_service.TournamentPairingRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tournament_service.TournamentPairingRequest}
 */
proto.tournament_service.TournamentPairingsRequest.prototype.addPairings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.tournament_service.TournamentPairingRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tournament_service.TournamentPairingsRequest} returns this
 */
proto.tournament_service.TournamentPairingsRequest.prototype.clearPairingsList = function() {
  return this.setPairingsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.TournamentResultOverrideRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.TournamentResultOverrideRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.TournamentResultOverrideRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    division: jspb.Message.getFieldWithDefault(msg, 2, ""),
    playerOneId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    playerTwoId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    round: jspb.Message.getFieldWithDefault(msg, 5, 0),
    playerOneScore: jspb.Message.getFieldWithDefault(msg, 6, 0),
    playerTwoScore: jspb.Message.getFieldWithDefault(msg, 7, 0),
    playerOneResult: jspb.Message.getFieldWithDefault(msg, 8, 0),
    playerTwoResult: jspb.Message.getFieldWithDefault(msg, 9, 0),
    gameEndReason: jspb.Message.getFieldWithDefault(msg, 10, 0),
    amendment: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    gameIndex: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.TournamentResultOverrideRequest}
 */
proto.tournament_service.TournamentResultOverrideRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.TournamentResultOverrideRequest;
  return proto.tournament_service.TournamentResultOverrideRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.TournamentResultOverrideRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.TournamentResultOverrideRequest}
 */
proto.tournament_service.TournamentResultOverrideRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDivision(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerOneId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerTwoId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerOneScore(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayerTwoScore(value);
      break;
    case 8:
      var value = /** @type {!proto.liwords.TournamentGameResult} */ (reader.readEnum());
      msg.setPlayerOneResult(value);
      break;
    case 9:
      var value = /** @type {!proto.liwords.TournamentGameResult} */ (reader.readEnum());
      msg.setPlayerTwoResult(value);
      break;
    case 10:
      var value = /** @type {!proto.liwords.GameEndReason} */ (reader.readEnum());
      msg.setGameEndReason(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAmendment(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.TournamentResultOverrideRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.TournamentResultOverrideRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.TournamentResultOverrideRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDivision();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlayerOneId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPlayerTwoId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getPlayerOneScore();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getPlayerTwoScore();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getPlayerOneResult();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getPlayerTwoResult();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getGameEndReason();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getAmendment();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getGameIndex();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.TournamentResultOverrideRequest} returns this
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string division = 2;
 * @return {string}
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.getDivision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.TournamentResultOverrideRequest} returns this
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.setDivision = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string player_one_id = 3;
 * @return {string}
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.getPlayerOneId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.TournamentResultOverrideRequest} returns this
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.setPlayerOneId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string player_two_id = 4;
 * @return {string}
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.getPlayerTwoId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.TournamentResultOverrideRequest} returns this
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.setPlayerTwoId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 round = 5;
 * @return {number}
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tournament_service.TournamentResultOverrideRequest} returns this
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 player_one_score = 6;
 * @return {number}
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.getPlayerOneScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.tournament_service.TournamentResultOverrideRequest} returns this
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.setPlayerOneScore = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 player_two_score = 7;
 * @return {number}
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.getPlayerTwoScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.tournament_service.TournamentResultOverrideRequest} returns this
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.setPlayerTwoScore = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional liwords.TournamentGameResult player_one_result = 8;
 * @return {!proto.liwords.TournamentGameResult}
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.getPlayerOneResult = function() {
  return /** @type {!proto.liwords.TournamentGameResult} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.liwords.TournamentGameResult} value
 * @return {!proto.tournament_service.TournamentResultOverrideRequest} returns this
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.setPlayerOneResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional liwords.TournamentGameResult player_two_result = 9;
 * @return {!proto.liwords.TournamentGameResult}
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.getPlayerTwoResult = function() {
  return /** @type {!proto.liwords.TournamentGameResult} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.liwords.TournamentGameResult} value
 * @return {!proto.tournament_service.TournamentResultOverrideRequest} returns this
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.setPlayerTwoResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional liwords.GameEndReason game_end_reason = 10;
 * @return {!proto.liwords.GameEndReason}
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.getGameEndReason = function() {
  return /** @type {!proto.liwords.GameEndReason} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.liwords.GameEndReason} value
 * @return {!proto.tournament_service.TournamentResultOverrideRequest} returns this
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.setGameEndReason = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional bool amendment = 11;
 * @return {boolean}
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.getAmendment = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tournament_service.TournamentResultOverrideRequest} returns this
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.setAmendment = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional int32 game_index = 12;
 * @return {number}
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.getGameIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.tournament_service.TournamentResultOverrideRequest} returns this
 */
proto.tournament_service.TournamentResultOverrideRequest.prototype.setGameIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.TournamentStartRoundCountdownRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.TournamentStartRoundCountdownRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.TournamentStartRoundCountdownRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.TournamentStartRoundCountdownRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    division: jspb.Message.getFieldWithDefault(msg, 2, ""),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    startAllRounds: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.TournamentStartRoundCountdownRequest}
 */
proto.tournament_service.TournamentStartRoundCountdownRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.TournamentStartRoundCountdownRequest;
  return proto.tournament_service.TournamentStartRoundCountdownRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.TournamentStartRoundCountdownRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.TournamentStartRoundCountdownRequest}
 */
proto.tournament_service.TournamentStartRoundCountdownRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDivision(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRound(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStartAllRounds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.TournamentStartRoundCountdownRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.TournamentStartRoundCountdownRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.TournamentStartRoundCountdownRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.TournamentStartRoundCountdownRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDivision();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getStartAllRounds();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tournament_service.TournamentStartRoundCountdownRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.TournamentStartRoundCountdownRequest} returns this
 */
proto.tournament_service.TournamentStartRoundCountdownRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string division = 2;
 * @return {string}
 */
proto.tournament_service.TournamentStartRoundCountdownRequest.prototype.getDivision = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.TournamentStartRoundCountdownRequest} returns this
 */
proto.tournament_service.TournamentStartRoundCountdownRequest.prototype.setDivision = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 round = 3;
 * @return {number}
 */
proto.tournament_service.TournamentStartRoundCountdownRequest.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tournament_service.TournamentStartRoundCountdownRequest} returns this
 */
proto.tournament_service.TournamentStartRoundCountdownRequest.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool start_all_rounds = 4;
 * @return {boolean}
 */
proto.tournament_service.TournamentStartRoundCountdownRequest.prototype.getStartAllRounds = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tournament_service.TournamentStartRoundCountdownRequest} returns this
 */
proto.tournament_service.TournamentStartRoundCountdownRequest.prototype.setStartAllRounds = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.TournamentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.TournamentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.TournamentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.TournamentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.TournamentResponse}
 */
proto.tournament_service.TournamentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.TournamentResponse;
  return proto.tournament_service.TournamentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.TournamentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.TournamentResponse}
 */
proto.tournament_service.TournamentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.TournamentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.TournamentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.TournamentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.TournamentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.NewTournamentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.NewTournamentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.NewTournamentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.NewTournamentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    slug: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.NewTournamentResponse}
 */
proto.tournament_service.NewTournamentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.NewTournamentResponse;
  return proto.tournament_service.NewTournamentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.NewTournamentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.NewTournamentResponse}
 */
proto.tournament_service.NewTournamentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.NewTournamentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.NewTournamentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.NewTournamentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.NewTournamentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tournament_service.NewTournamentResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.NewTournamentResponse} returns this
 */
proto.tournament_service.NewTournamentResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string slug = 2;
 * @return {string}
 */
proto.tournament_service.NewTournamentResponse.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.NewTournamentResponse} returns this
 */
proto.tournament_service.NewTournamentResponse.prototype.setSlug = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.GetTournamentMetadataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.GetTournamentMetadataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.GetTournamentMetadataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.GetTournamentMetadataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    slug: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.GetTournamentMetadataRequest}
 */
proto.tournament_service.GetTournamentMetadataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.GetTournamentMetadataRequest;
  return proto.tournament_service.GetTournamentMetadataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.GetTournamentMetadataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.GetTournamentMetadataRequest}
 */
proto.tournament_service.GetTournamentMetadataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.GetTournamentMetadataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.GetTournamentMetadataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.GetTournamentMetadataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.GetTournamentMetadataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tournament_service.GetTournamentMetadataRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.GetTournamentMetadataRequest} returns this
 */
proto.tournament_service.GetTournamentMetadataRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string slug = 2;
 * @return {string}
 */
proto.tournament_service.GetTournamentMetadataRequest.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.GetTournamentMetadataRequest} returns this
 */
proto.tournament_service.GetTournamentMetadataRequest.prototype.setSlug = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.GetTournamentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.GetTournamentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.GetTournamentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.GetTournamentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.GetTournamentRequest}
 */
proto.tournament_service.GetTournamentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.GetTournamentRequest;
  return proto.tournament_service.GetTournamentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.GetTournamentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.GetTournamentRequest}
 */
proto.tournament_service.GetTournamentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.GetTournamentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.GetTournamentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.GetTournamentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.GetTournamentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tournament_service.GetTournamentRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.GetTournamentRequest} returns this
 */
proto.tournament_service.GetTournamentRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.FinishTournamentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.FinishTournamentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.FinishTournamentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.FinishTournamentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.FinishTournamentRequest}
 */
proto.tournament_service.FinishTournamentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.FinishTournamentRequest;
  return proto.tournament_service.FinishTournamentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.FinishTournamentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.FinishTournamentRequest}
 */
proto.tournament_service.FinishTournamentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.FinishTournamentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.FinishTournamentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.FinishTournamentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.FinishTournamentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tournament_service.FinishTournamentRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.FinishTournamentRequest} returns this
 */
proto.tournament_service.FinishTournamentRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tournament_service.TournamentMetadataResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.TournamentMetadataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.TournamentMetadataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.TournamentMetadataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.TournamentMetadataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.tournament_service.TournamentMetadata.toObject(includeInstance, f),
    directorsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.TournamentMetadataResponse}
 */
proto.tournament_service.TournamentMetadataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.TournamentMetadataResponse;
  return proto.tournament_service.TournamentMetadataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.TournamentMetadataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.TournamentMetadataResponse}
 */
proto.tournament_service.TournamentMetadataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tournament_service.TournamentMetadata;
      reader.readMessage(value,proto.tournament_service.TournamentMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addDirectors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.TournamentMetadataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.TournamentMetadataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.TournamentMetadataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.TournamentMetadataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tournament_service.TournamentMetadata.serializeBinaryToWriter
    );
  }
  f = message.getDirectorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional TournamentMetadata metadata = 1;
 * @return {?proto.tournament_service.TournamentMetadata}
 */
proto.tournament_service.TournamentMetadataResponse.prototype.getMetadata = function() {
  return /** @type{?proto.tournament_service.TournamentMetadata} */ (
    jspb.Message.getWrapperField(this, proto.tournament_service.TournamentMetadata, 1));
};


/**
 * @param {?proto.tournament_service.TournamentMetadata|undefined} value
 * @return {!proto.tournament_service.TournamentMetadataResponse} returns this
*/
proto.tournament_service.TournamentMetadataResponse.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tournament_service.TournamentMetadataResponse} returns this
 */
proto.tournament_service.TournamentMetadataResponse.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tournament_service.TournamentMetadataResponse.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string directors = 2;
 * @return {!Array<string>}
 */
proto.tournament_service.TournamentMetadataResponse.prototype.getDirectorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tournament_service.TournamentMetadataResponse} returns this
 */
proto.tournament_service.TournamentMetadataResponse.prototype.setDirectorsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tournament_service.TournamentMetadataResponse} returns this
 */
proto.tournament_service.TournamentMetadataResponse.prototype.addDirectors = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tournament_service.TournamentMetadataResponse} returns this
 */
proto.tournament_service.TournamentMetadataResponse.prototype.clearDirectorsList = function() {
  return this.setDirectorsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.RecentGamesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.RecentGamesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.RecentGamesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.RecentGamesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    numGames: jspb.Message.getFieldWithDefault(msg, 2, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.RecentGamesRequest}
 */
proto.tournament_service.RecentGamesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.RecentGamesRequest;
  return proto.tournament_service.RecentGamesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.RecentGamesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.RecentGamesRequest}
 */
proto.tournament_service.RecentGamesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumGames(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.RecentGamesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.RecentGamesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.RecentGamesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.RecentGamesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNumGames();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tournament_service.RecentGamesRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.RecentGamesRequest} returns this
 */
proto.tournament_service.RecentGamesRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 num_games = 2;
 * @return {number}
 */
proto.tournament_service.RecentGamesRequest.prototype.getNumGames = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tournament_service.RecentGamesRequest} returns this
 */
proto.tournament_service.RecentGamesRequest.prototype.setNumGames = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 offset = 3;
 * @return {number}
 */
proto.tournament_service.RecentGamesRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tournament_service.RecentGamesRequest} returns this
 */
proto.tournament_service.RecentGamesRequest.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tournament_service.RecentGamesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.RecentGamesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.RecentGamesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.RecentGamesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.RecentGamesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gamesList: jspb.Message.toObjectList(msg.getGamesList(),
    api_proto_realtime_realtime_pb.TournamentGameEndedEvent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.RecentGamesResponse}
 */
proto.tournament_service.RecentGamesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.RecentGamesResponse;
  return proto.tournament_service.RecentGamesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.RecentGamesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.RecentGamesResponse}
 */
proto.tournament_service.RecentGamesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new api_proto_realtime_realtime_pb.TournamentGameEndedEvent;
      reader.readMessage(value,api_proto_realtime_realtime_pb.TournamentGameEndedEvent.deserializeBinaryFromReader);
      msg.addGames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.RecentGamesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.RecentGamesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.RecentGamesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.RecentGamesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGamesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      api_proto_realtime_realtime_pb.TournamentGameEndedEvent.serializeBinaryToWriter
    );
  }
};


/**
 * repeated liwords.TournamentGameEndedEvent games = 1;
 * @return {!Array<!proto.liwords.TournamentGameEndedEvent>}
 */
proto.tournament_service.RecentGamesResponse.prototype.getGamesList = function() {
  return /** @type{!Array<!proto.liwords.TournamentGameEndedEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, api_proto_realtime_realtime_pb.TournamentGameEndedEvent, 1));
};


/**
 * @param {!Array<!proto.liwords.TournamentGameEndedEvent>} value
 * @return {!proto.tournament_service.RecentGamesResponse} returns this
*/
proto.tournament_service.RecentGamesResponse.prototype.setGamesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.liwords.TournamentGameEndedEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.liwords.TournamentGameEndedEvent}
 */
proto.tournament_service.RecentGamesResponse.prototype.addGames = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.liwords.TournamentGameEndedEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tournament_service.RecentGamesResponse} returns this
 */
proto.tournament_service.RecentGamesResponse.prototype.clearGamesList = function() {
  return this.setGamesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.UnstartTournamentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.UnstartTournamentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.UnstartTournamentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.UnstartTournamentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.UnstartTournamentRequest}
 */
proto.tournament_service.UnstartTournamentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.UnstartTournamentRequest;
  return proto.tournament_service.UnstartTournamentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.UnstartTournamentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.UnstartTournamentRequest}
 */
proto.tournament_service.UnstartTournamentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.UnstartTournamentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.UnstartTournamentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.UnstartTournamentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.UnstartTournamentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tournament_service.UnstartTournamentRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.UnstartTournamentRequest} returns this
 */
proto.tournament_service.UnstartTournamentRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.UncheckInRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.UncheckInRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.UncheckInRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.UncheckInRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.UncheckInRequest}
 */
proto.tournament_service.UncheckInRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.UncheckInRequest;
  return proto.tournament_service.UncheckInRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.UncheckInRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.UncheckInRequest}
 */
proto.tournament_service.UncheckInRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.UncheckInRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.UncheckInRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.UncheckInRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.UncheckInRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tournament_service.UncheckInRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.UncheckInRequest} returns this
 */
proto.tournament_service.UncheckInRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.CheckinRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.CheckinRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.CheckinRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.CheckinRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.CheckinRequest}
 */
proto.tournament_service.CheckinRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.CheckinRequest;
  return proto.tournament_service.CheckinRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.CheckinRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.CheckinRequest}
 */
proto.tournament_service.CheckinRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.CheckinRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.CheckinRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.CheckinRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.CheckinRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tournament_service.CheckinRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.CheckinRequest} returns this
 */
proto.tournament_service.CheckinRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.NewClubSessionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.NewClubSessionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.NewClubSessionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.NewClubSessionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    date: (f = msg.getDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    clubId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.NewClubSessionRequest}
 */
proto.tournament_service.NewClubSessionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.NewClubSessionRequest;
  return proto.tournament_service.NewClubSessionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.NewClubSessionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.NewClubSessionRequest}
 */
proto.tournament_service.NewClubSessionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDate(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClubId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.NewClubSessionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.NewClubSessionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.NewClubSessionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.NewClubSessionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getClubId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp date = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.tournament_service.NewClubSessionRequest.prototype.getDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.tournament_service.NewClubSessionRequest} returns this
*/
proto.tournament_service.NewClubSessionRequest.prototype.setDate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tournament_service.NewClubSessionRequest} returns this
 */
proto.tournament_service.NewClubSessionRequest.prototype.clearDate = function() {
  return this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tournament_service.NewClubSessionRequest.prototype.hasDate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string club_id = 2;
 * @return {string}
 */
proto.tournament_service.NewClubSessionRequest.prototype.getClubId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.NewClubSessionRequest} returns this
 */
proto.tournament_service.NewClubSessionRequest.prototype.setClubId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.ClubSessionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.ClubSessionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.ClubSessionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.ClubSessionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tournamentId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    slug: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.ClubSessionResponse}
 */
proto.tournament_service.ClubSessionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.ClubSessionResponse;
  return proto.tournament_service.ClubSessionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.ClubSessionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.ClubSessionResponse}
 */
proto.tournament_service.ClubSessionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTournamentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlug(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.ClubSessionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.ClubSessionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.ClubSessionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.ClubSessionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTournamentId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSlug();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string tournament_id = 1;
 * @return {string}
 */
proto.tournament_service.ClubSessionResponse.prototype.getTournamentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.ClubSessionResponse} returns this
 */
proto.tournament_service.ClubSessionResponse.prototype.setTournamentId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string slug = 2;
 * @return {string}
 */
proto.tournament_service.ClubSessionResponse.prototype.getSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.ClubSessionResponse} returns this
 */
proto.tournament_service.ClubSessionResponse.prototype.setSlug = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.RecentClubSessionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.RecentClubSessionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.RecentClubSessionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.RecentClubSessionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0),
    offset: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.RecentClubSessionsRequest}
 */
proto.tournament_service.RecentClubSessionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.RecentClubSessionsRequest;
  return proto.tournament_service.RecentClubSessionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.RecentClubSessionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.RecentClubSessionsRequest}
 */
proto.tournament_service.RecentClubSessionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.RecentClubSessionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.RecentClubSessionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.RecentClubSessionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.RecentClubSessionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tournament_service.RecentClubSessionsRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tournament_service.RecentClubSessionsRequest} returns this
 */
proto.tournament_service.RecentClubSessionsRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.tournament_service.RecentClubSessionsRequest.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tournament_service.RecentClubSessionsRequest} returns this
 */
proto.tournament_service.RecentClubSessionsRequest.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 offset = 3;
 * @return {number}
 */
proto.tournament_service.RecentClubSessionsRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tournament_service.RecentClubSessionsRequest} returns this
 */
proto.tournament_service.RecentClubSessionsRequest.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tournament_service.ClubSessionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tournament_service.ClubSessionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tournament_service.ClubSessionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tournament_service.ClubSessionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.ClubSessionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionsList: jspb.Message.toObjectList(msg.getSessionsList(),
    proto.tournament_service.ClubSessionResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tournament_service.ClubSessionsResponse}
 */
proto.tournament_service.ClubSessionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tournament_service.ClubSessionsResponse;
  return proto.tournament_service.ClubSessionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tournament_service.ClubSessionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tournament_service.ClubSessionsResponse}
 */
proto.tournament_service.ClubSessionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tournament_service.ClubSessionResponse;
      reader.readMessage(value,proto.tournament_service.ClubSessionResponse.deserializeBinaryFromReader);
      msg.addSessions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tournament_service.ClubSessionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tournament_service.ClubSessionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tournament_service.ClubSessionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tournament_service.ClubSessionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tournament_service.ClubSessionResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ClubSessionResponse sessions = 1;
 * @return {!Array<!proto.tournament_service.ClubSessionResponse>}
 */
proto.tournament_service.ClubSessionsResponse.prototype.getSessionsList = function() {
  return /** @type{!Array<!proto.tournament_service.ClubSessionResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tournament_service.ClubSessionResponse, 1));
};


/**
 * @param {!Array<!proto.tournament_service.ClubSessionResponse>} value
 * @return {!proto.tournament_service.ClubSessionsResponse} returns this
*/
proto.tournament_service.ClubSessionsResponse.prototype.setSessionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tournament_service.ClubSessionResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tournament_service.ClubSessionResponse}
 */
proto.tournament_service.ClubSessionsResponse.prototype.addSessions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tournament_service.ClubSessionResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tournament_service.ClubSessionsResponse} returns this
 */
proto.tournament_service.ClubSessionsResponse.prototype.clearSessionsList = function() {
  return this.setSessionsList([]);
};


/**
 * @enum {number}
 */
proto.tournament_service.TType = {
  STANDARD: 0,
  CLUB: 1,
  CHILD: 2,
  LEGACY: 3
};

goog.object.extend(exports, proto.tournament_service);
