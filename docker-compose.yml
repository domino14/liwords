version: "3"

services:
  app: &appsetup
    build:
      context: .
      dockerfile: Dockerfile-dev
    environment:
      LEXICON_PATH: /opt/program/data/lexica
      LETTER_DISTRIBUTION_PATH: /opt/program/data/letterdistributions
      DB_CONN_STRING: "host=db port=5432 user=postgres dbname=liwords password=pass sslmode=disable"
      SECRET_KEY: jqxztripletriple
      DEBUG: 1
      NATS_URL: nats://nats:4222
      REGISTRATION_CODE: foobar
      MAILGUN_KEY: ${MAILGUN_KEY:-default}
      REDIS_URL: "redis://redis:6379"
      GORACE: history_size=7
      ARGON_MEMORY: 1024
    volumes:
      - .:/opt/program:rw
      - ./data/lexica/dawg:/opt/program/data/lexica/dawg
    command: sh -c "go run -race cmd/liwords-api/*.go"
    depends_on: ["db", "proxy", "nats", "socket", "redis"]
    networks:
      - aeronet
    labels:
      - "traefik.http.routers.liwords.rule=Host(`liwords.localhost`) && PathPrefix(`/twirp/`)"
      - "traefik.http.routers.liwords.entrypoints=web"
      - "traefik.http.services.liwords.loadbalancer.server.port=8001"
      - traefik.enable=true
  # Scaling.
  app2: *appsetup

  bot:
    build:
      context: ../macondo
      dockerfile: Dockerfile-bot-dev
    environment:
      LEXICON_PATH: /opt/program/data/lexica
      LETTER_DISTRIBUTION_PATH: /opt/program/data/letterdistributions
      STRATEGY_PARAMS_PATH: /opt/program/data/strategy
      NATS_URL: nats://nats:4222
      DEBUG: 1
    volumes:
      - ../macondo:/opt/program:rw
      # Use the same gaddag files we use for the WASM integration.
      - ./liwords-ui/public/wasm:/opt/program/data/lexica/gaddag
    command: sh -c "go run -race cmd/bot/*.go"
    depends_on: ["nats"]
    networks:
      - aeronet

  socket: &socketsetup
    build:
      context: ../liwords-socket
      dockerfile: Dockerfile-dev
    environment:
      SECRET_KEY: jqxztripletriple
      DEBUG: 1
      NATS_URL: nats://nats:4222
    volumes:
      - ../liwords-socket:/opt/program:rw
    command: ["go", "run", "-race", "cmd/socketsrv/main.go"]
    networks:
      - aeronet
    labels:
      - "traefik.http.routers.liwords-socket.rule=Host(`liwords.localhost`) && PathPrefix(`/ws`)"
      - "traefik.http.routers.liwords-socket.entrypoints=web"
      - "traefik.http.services.liwords-socket.loadbalancer.server.port=8087"
      - traefik.enable=true

  socket2: *socketsetup

  proxy:
    image: "traefik:v2.2"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - aeronet

  nats:
    image: "nats"
    ports:
      - "4222:4222"
      - "8222:8222"
    networks:
      - aeronet

  redis:
    image: "redis:alpine"
    volumes:
      - redis-data-volume:/data
    ports:
      - 6379:6379
    networks:
      - aeronet

  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: liwords
    volumes:
      - pg-data-volume:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - aeronet

  frontend:
    build:
      context: .
      dockerfile: Dockerfile-fe
    volumes:
      - ./liwords-ui:/opt/liwords-ui
      # Install node_modules inside the docker container
      - "/opt/liwords-ui/node_modules"
    working_dir: /opt/liwords-ui
    command: npm start
    # Need the following else the frontend quits immediately:
    stdin_open: true
    networks:
      - aeronet
    labels:
      - "traefik.http.routers.liwords-fe.rule=Host(`liwords.localhost`)"
      - "traefik.http.services.liwords-fe.loadbalancer.server.port=3000"
      - traefik.enable=true

  pb_compiler:
    build:
      context: .
      dockerfile: Dockerfile-pb
    volumes:
      - .:/opt/code/liwords:rw
      - ../macondo:/opt/code/macondo

networks:
  aeronet:
    driver: bridge

volumes:
  pg-data-volume:
    external: false
  redis-data-volume:
    external: false

# bringing up multiple servers, e.g.
# docker-compose up --scale socket=2
# docker-compose up --scale app=2
