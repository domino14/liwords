// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: api/proto/tournament_service/tournament_service.proto

package tournament_service

import (
	realtime "github.com/domino14/liwords/rpc/api/proto/realtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TType int32

const (
	// A Standard tournament
	TType_STANDARD TType = 0
	// A new "clubhouse"
	TType_CLUB TType = 1
	// A club session or child tournament.
	TType_CHILD TType = 2
	// A legacy tournament
	TType_LEGACY TType = 3
)

// Enum value maps for TType.
var (
	TType_name = map[int32]string{
		0: "STANDARD",
		1: "CLUB",
		2: "CHILD",
		3: "LEGACY",
	}
	TType_value = map[string]int32{
		"STANDARD": 0,
		"CLUB":     1,
		"CHILD":    2,
		"LEGACY":   3,
	}
)

func (x TType) Enum() *TType {
	p := new(TType)
	*p = x
	return p
}

func (x TType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_tournament_service_tournament_service_proto_enumTypes[0].Descriptor()
}

func (TType) Type() protoreflect.EnumType {
	return &file_api_proto_tournament_service_tournament_service_proto_enumTypes[0]
}

func (x TType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TType.Descriptor instead.
func (TType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{0}
}

type StartRoundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId string `protobuf:"bytes,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Round        int32  `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *StartRoundRequest) Reset() {
	*x = StartRoundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRoundRequest) ProtoMessage() {}

func (x *StartRoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRoundRequest.ProtoReflect.Descriptor instead.
func (*StartRoundRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{0}
}

func (x *StartRoundRequest) GetTournamentId() string {
	if x != nil {
		return x.TournamentId
	}
	return ""
}

func (x *StartRoundRequest) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

type NewTournamentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If slug is not assigned, a random ID will be chosen.
	Slug              string   `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Name              string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description       string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	DirectorUsernames []string `protobuf:"bytes,4,rep,name=director_usernames,json=directorUsernames,proto3" json:"director_usernames,omitempty"`
	Type              TType    `protobuf:"varint,5,opt,name=type,proto3,enum=tournament_service.TType" json:"type,omitempty"`
}

func (x *NewTournamentRequest) Reset() {
	*x = NewTournamentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTournamentRequest) ProtoMessage() {}

func (x *NewTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTournamentRequest.ProtoReflect.Descriptor instead.
func (*NewTournamentRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{1}
}

func (x *NewTournamentRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *NewTournamentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewTournamentRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NewTournamentRequest) GetDirectorUsernames() []string {
	if x != nil {
		return x.DirectorUsernames
	}
	return nil
}

func (x *NewTournamentRequest) GetType() TType {
	if x != nil {
		return x.Type
	}
	return TType_STANDARD
}

type TournamentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// description is the markdown information for the tournament on the
	// right-hand side
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Slug        string `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	Type        TType  `protobuf:"varint,5,opt,name=type,proto3,enum=tournament_service.TType" json:"type,omitempty"`
	// a caption that shows up for the tournament in various places.
	Disclaimer string `protobuf:"bytes,6,opt,name=disclaimer,proto3" json:"disclaimer,omitempty"`
	// tile_style if set is default
	TileStyle string `protobuf:"bytes,7,opt,name=tile_style,json=tileStyle,proto3" json:"tile_style,omitempty"`
	// board_style if set is default
	BoardStyle string `protobuf:"bytes,8,opt,name=board_style,json=boardStyle,proto3" json:"board_style,omitempty"`
	// for clubs (not tournaments) we want to be able to hard-code settings
	// if the following parameter is set.
	DefaultClubSettings *realtime.GameRequest `protobuf:"bytes,9,opt,name=default_club_settings,json=defaultClubSettings,proto3" json:"default_club_settings,omitempty"`
	// When setting the game request, some clubs would like some parameters
	// to be more freeform (for example, lexicon option or time setting).
	// The following parameter is a list of field names that are freeform.
	// (Use protobuf field names for consistency, for example,
	// initial_time_seconds).
	FreeformClubSettingFields []string `protobuf:"bytes,10,rep,name=freeform_club_setting_fields,json=freeformClubSettingFields,proto3" json:"freeform_club_setting_fields,omitempty"`
	// a simple password for this tournament. Without it you can't see what is
	// happening. Likely front-end only implementation, although password
	// will be at least hashed. For clubs that want to be more private.
	Password string `protobuf:"bytes,11,opt,name=password,proto3" json:"password,omitempty"`
	// a url to a logo in the metadata card, disclaimer card and center square.
	Logo string `protobuf:"bytes,12,opt,name=logo,proto3" json:"logo,omitempty"`
	// an override color for the gradient in the tournament info
	Color string `protobuf:"bytes,13,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *TournamentMetadata) Reset() {
	*x = TournamentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentMetadata) ProtoMessage() {}

func (x *TournamentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentMetadata.ProtoReflect.Descriptor instead.
func (*TournamentMetadata) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{2}
}

func (x *TournamentMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TournamentMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TournamentMetadata) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *TournamentMetadata) GetType() TType {
	if x != nil {
		return x.Type
	}
	return TType_STANDARD
}

func (x *TournamentMetadata) GetDisclaimer() string {
	if x != nil {
		return x.Disclaimer
	}
	return ""
}

func (x *TournamentMetadata) GetTileStyle() string {
	if x != nil {
		return x.TileStyle
	}
	return ""
}

func (x *TournamentMetadata) GetBoardStyle() string {
	if x != nil {
		return x.BoardStyle
	}
	return ""
}

func (x *TournamentMetadata) GetDefaultClubSettings() *realtime.GameRequest {
	if x != nil {
		return x.DefaultClubSettings
	}
	return nil
}

func (x *TournamentMetadata) GetFreeformClubSettingFields() []string {
	if x != nil {
		return x.FreeformClubSettingFields
	}
	return nil
}

func (x *TournamentMetadata) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *TournamentMetadata) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *TournamentMetadata) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type SetTournamentMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *TournamentMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *SetTournamentMetadataRequest) Reset() {
	*x = SetTournamentMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTournamentMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTournamentMetadataRequest) ProtoMessage() {}

func (x *SetTournamentMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTournamentMetadataRequest.ProtoReflect.Descriptor instead.
func (*SetTournamentMetadataRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{3}
}

func (x *SetTournamentMetadataRequest) GetMetadata() *TournamentMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SingleRoundControlsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division      string                 `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Round         int32                  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	RoundControls *realtime.RoundControl `protobuf:"bytes,4,opt,name=round_controls,json=roundControls,proto3" json:"round_controls,omitempty"`
}

func (x *SingleRoundControlsRequest) Reset() {
	*x = SingleRoundControlsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleRoundControlsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleRoundControlsRequest) ProtoMessage() {}

func (x *SingleRoundControlsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleRoundControlsRequest.ProtoReflect.Descriptor instead.
func (*SingleRoundControlsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{4}
}

func (x *SingleRoundControlsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SingleRoundControlsRequest) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *SingleRoundControlsRequest) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *SingleRoundControlsRequest) GetRoundControls() *realtime.RoundControl {
	if x != nil {
		return x.RoundControls
	}
	return nil
}

type PairRoundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division       string `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Round          int32  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	OverwriteByes  bool   `protobuf:"varint,4,opt,name=overwrite_byes,json=overwriteByes,proto3" json:"overwrite_byes,omitempty"`
	DeletePairings bool   `protobuf:"varint,5,opt,name=delete_pairings,json=deletePairings,proto3" json:"delete_pairings,omitempty"`
}

func (x *PairRoundRequest) Reset() {
	*x = PairRoundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PairRoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PairRoundRequest) ProtoMessage() {}

func (x *PairRoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PairRoundRequest.ProtoReflect.Descriptor instead.
func (*PairRoundRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{5}
}

func (x *PairRoundRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PairRoundRequest) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *PairRoundRequest) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *PairRoundRequest) GetOverwriteByes() bool {
	if x != nil {
		return x.OverwriteByes
	}
	return false
}

func (x *PairRoundRequest) GetDeletePairings() bool {
	if x != nil {
		return x.DeletePairings
	}
	return false
}

type TournamentDivisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division string `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
}

func (x *TournamentDivisionRequest) Reset() {
	*x = TournamentDivisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentDivisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentDivisionRequest) ProtoMessage() {}

func (x *TournamentDivisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentDivisionRequest.ProtoReflect.Descriptor instead.
func (*TournamentDivisionRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{6}
}

func (x *TournamentDivisionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentDivisionRequest) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

type TournamentPairingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerOneId string `protobuf:"bytes,1,opt,name=player_one_id,json=playerOneId,proto3" json:"player_one_id,omitempty"`
	PlayerTwoId string `protobuf:"bytes,2,opt,name=player_two_id,json=playerTwoId,proto3" json:"player_two_id,omitempty"`
	Round       int32  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *TournamentPairingRequest) Reset() {
	*x = TournamentPairingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentPairingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentPairingRequest) ProtoMessage() {}

func (x *TournamentPairingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentPairingRequest.ProtoReflect.Descriptor instead.
func (*TournamentPairingRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{7}
}

func (x *TournamentPairingRequest) GetPlayerOneId() string {
	if x != nil {
		return x.PlayerOneId
	}
	return ""
}

func (x *TournamentPairingRequest) GetPlayerTwoId() string {
	if x != nil {
		return x.PlayerTwoId
	}
	return ""
}

func (x *TournamentPairingRequest) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

type TournamentPairingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division string                      `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Pairings []*TournamentPairingRequest `protobuf:"bytes,3,rep,name=pairings,proto3" json:"pairings,omitempty"`
}

func (x *TournamentPairingsRequest) Reset() {
	*x = TournamentPairingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentPairingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentPairingsRequest) ProtoMessage() {}

func (x *TournamentPairingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentPairingsRequest.ProtoReflect.Descriptor instead.
func (*TournamentPairingsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{8}
}

func (x *TournamentPairingsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentPairingsRequest) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *TournamentPairingsRequest) GetPairings() []*TournamentPairingRequest {
	if x != nil {
		return x.Pairings
	}
	return nil
}

// TournamentResultOverrideRequest is sent when a score needs to be edited
// or added by a director. Note that player one and player two need to be
// the players that went first and second, respectively; otherwise,
// we will not be able to accurately track firsts/seconds.
type TournamentResultOverrideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division        string                        `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	PlayerOneId     string                        `protobuf:"bytes,3,opt,name=player_one_id,json=playerOneId,proto3" json:"player_one_id,omitempty"`
	PlayerTwoId     string                        `protobuf:"bytes,4,opt,name=player_two_id,json=playerTwoId,proto3" json:"player_two_id,omitempty"`
	Round           int32                         `protobuf:"varint,5,opt,name=round,proto3" json:"round,omitempty"`
	PlayerOneScore  int32                         `protobuf:"varint,6,opt,name=player_one_score,json=playerOneScore,proto3" json:"player_one_score,omitempty"`
	PlayerTwoScore  int32                         `protobuf:"varint,7,opt,name=player_two_score,json=playerTwoScore,proto3" json:"player_two_score,omitempty"`
	PlayerOneResult realtime.TournamentGameResult `protobuf:"varint,8,opt,name=player_one_result,json=playerOneResult,proto3,enum=liwords.TournamentGameResult" json:"player_one_result,omitempty"`
	PlayerTwoResult realtime.TournamentGameResult `protobuf:"varint,9,opt,name=player_two_result,json=playerTwoResult,proto3,enum=liwords.TournamentGameResult" json:"player_two_result,omitempty"`
	GameEndReason   realtime.GameEndReason        `protobuf:"varint,10,opt,name=game_end_reason,json=gameEndReason,proto3,enum=liwords.GameEndReason" json:"game_end_reason,omitempty"`
	Amendment       bool                          `protobuf:"varint,11,opt,name=amendment,proto3" json:"amendment,omitempty"`
	GameIndex       int32                         `protobuf:"varint,12,opt,name=game_index,json=gameIndex,proto3" json:"game_index,omitempty"`
}

func (x *TournamentResultOverrideRequest) Reset() {
	*x = TournamentResultOverrideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentResultOverrideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentResultOverrideRequest) ProtoMessage() {}

func (x *TournamentResultOverrideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentResultOverrideRequest.ProtoReflect.Descriptor instead.
func (*TournamentResultOverrideRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{9}
}

func (x *TournamentResultOverrideRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentResultOverrideRequest) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *TournamentResultOverrideRequest) GetPlayerOneId() string {
	if x != nil {
		return x.PlayerOneId
	}
	return ""
}

func (x *TournamentResultOverrideRequest) GetPlayerTwoId() string {
	if x != nil {
		return x.PlayerTwoId
	}
	return ""
}

func (x *TournamentResultOverrideRequest) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TournamentResultOverrideRequest) GetPlayerOneScore() int32 {
	if x != nil {
		return x.PlayerOneScore
	}
	return 0
}

func (x *TournamentResultOverrideRequest) GetPlayerTwoScore() int32 {
	if x != nil {
		return x.PlayerTwoScore
	}
	return 0
}

func (x *TournamentResultOverrideRequest) GetPlayerOneResult() realtime.TournamentGameResult {
	if x != nil {
		return x.PlayerOneResult
	}
	return realtime.TournamentGameResult_NO_RESULT
}

func (x *TournamentResultOverrideRequest) GetPlayerTwoResult() realtime.TournamentGameResult {
	if x != nil {
		return x.PlayerTwoResult
	}
	return realtime.TournamentGameResult_NO_RESULT
}

func (x *TournamentResultOverrideRequest) GetGameEndReason() realtime.GameEndReason {
	if x != nil {
		return x.GameEndReason
	}
	return realtime.GameEndReason_NONE
}

func (x *TournamentResultOverrideRequest) GetAmendment() bool {
	if x != nil {
		return x.Amendment
	}
	return false
}

func (x *TournamentResultOverrideRequest) GetGameIndex() int32 {
	if x != nil {
		return x.GameIndex
	}
	return 0
}

type TournamentStartRoundCountdownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division       string `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Round          int32  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	StartAllRounds bool   `protobuf:"varint,4,opt,name=start_all_rounds,json=startAllRounds,proto3" json:"start_all_rounds,omitempty"`
}

func (x *TournamentStartRoundCountdownRequest) Reset() {
	*x = TournamentStartRoundCountdownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentStartRoundCountdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentStartRoundCountdownRequest) ProtoMessage() {}

func (x *TournamentStartRoundCountdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentStartRoundCountdownRequest.ProtoReflect.Descriptor instead.
func (*TournamentStartRoundCountdownRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{10}
}

func (x *TournamentStartRoundCountdownRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentStartRoundCountdownRequest) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *TournamentStartRoundCountdownRequest) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TournamentStartRoundCountdownRequest) GetStartAllRounds() bool {
	if x != nil {
		return x.StartAllRounds
	}
	return false
}

type TournamentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TournamentResponse) Reset() {
	*x = TournamentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentResponse) ProtoMessage() {}

func (x *TournamentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentResponse.ProtoReflect.Descriptor instead.
func (*TournamentResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{11}
}

type NewTournamentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug string `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *NewTournamentResponse) Reset() {
	*x = NewTournamentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTournamentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTournamentResponse) ProtoMessage() {}

func (x *NewTournamentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTournamentResponse.ProtoReflect.Descriptor instead.
func (*NewTournamentResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{12}
}

func (x *NewTournamentResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NewTournamentResponse) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type GetTournamentMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User must provide the ID, or the slug (but not both)
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug string `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *GetTournamentMetadataRequest) Reset() {
	*x = GetTournamentMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTournamentMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentMetadataRequest) ProtoMessage() {}

func (x *GetTournamentMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetTournamentMetadataRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetTournamentMetadataRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetTournamentMetadataRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type GetTournamentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTournamentRequest) Reset() {
	*x = GetTournamentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTournamentRequest) ProtoMessage() {}

func (x *GetTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTournamentRequest.ProtoReflect.Descriptor instead.
func (*GetTournamentRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetTournamentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FinishTournamentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FinishTournamentRequest) Reset() {
	*x = FinishTournamentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishTournamentRequest) ProtoMessage() {}

func (x *FinishTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishTournamentRequest.ProtoReflect.Descriptor instead.
func (*FinishTournamentRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{15}
}

func (x *FinishTournamentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TournamentMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *TournamentMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// directors are not part of the metadata. We decided to make those
	// individually addable/removable (See AddDirectors)
	Directors []string `protobuf:"bytes,2,rep,name=directors,proto3" json:"directors,omitempty"`
}

func (x *TournamentMetadataResponse) Reset() {
	*x = TournamentMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentMetadataResponse) ProtoMessage() {}

func (x *TournamentMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentMetadataResponse.ProtoReflect.Descriptor instead.
func (*TournamentMetadataResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{16}
}

func (x *TournamentMetadataResponse) GetMetadata() *TournamentMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TournamentMetadataResponse) GetDirectors() []string {
	if x != nil {
		return x.Directors
	}
	return nil
}

type RecentGamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tournament id
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NumGames int32  `protobuf:"varint,2,opt,name=num_games,json=numGames,proto3" json:"num_games,omitempty"`
	Offset   int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *RecentGamesRequest) Reset() {
	*x = RecentGamesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentGamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentGamesRequest) ProtoMessage() {}

func (x *RecentGamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentGamesRequest.ProtoReflect.Descriptor instead.
func (*RecentGamesRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{17}
}

func (x *RecentGamesRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecentGamesRequest) GetNumGames() int32 {
	if x != nil {
		return x.NumGames
	}
	return 0
}

func (x *RecentGamesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type RecentGamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Games []*realtime.TournamentGameEndedEvent `protobuf:"bytes,1,rep,name=games,proto3" json:"games,omitempty"`
}

func (x *RecentGamesResponse) Reset() {
	*x = RecentGamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentGamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentGamesResponse) ProtoMessage() {}

func (x *RecentGamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentGamesResponse.ProtoReflect.Descriptor instead.
func (*RecentGamesResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{18}
}

func (x *RecentGamesResponse) GetGames() []*realtime.TournamentGameEndedEvent {
	if x != nil {
		return x.Games
	}
	return nil
}

type UnstartTournamentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UnstartTournamentRequest) Reset() {
	*x = UnstartTournamentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnstartTournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnstartTournamentRequest) ProtoMessage() {}

func (x *UnstartTournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnstartTournamentRequest.ProtoReflect.Descriptor instead.
func (*UnstartTournamentRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{19}
}

func (x *UnstartTournamentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UncheckInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UncheckInRequest) Reset() {
	*x = UncheckInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UncheckInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UncheckInRequest) ProtoMessage() {}

func (x *UncheckInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UncheckInRequest.ProtoReflect.Descriptor instead.
func (*UncheckInRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{20}
}

func (x *UncheckInRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CheckinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CheckinRequest) Reset() {
	*x = CheckinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckinRequest) ProtoMessage() {}

func (x *CheckinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckinRequest.ProtoReflect.Descriptor instead.
func (*CheckinRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{21}
}

func (x *CheckinRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type NewClubSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// date is the date of the session
	Date   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	ClubId string                 `protobuf:"bytes,2,opt,name=club_id,json=clubId,proto3" json:"club_id,omitempty"`
}

func (x *NewClubSessionRequest) Reset() {
	*x = NewClubSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewClubSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewClubSessionRequest) ProtoMessage() {}

func (x *NewClubSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewClubSessionRequest.ProtoReflect.Descriptor instead.
func (*NewClubSessionRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{22}
}

func (x *NewClubSessionRequest) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *NewClubSessionRequest) GetClubId() string {
	if x != nil {
		return x.ClubId
	}
	return ""
}

type ClubSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note that club sessions are tournaments in our backend. We return
	// the created tournament ID here:
	TournamentId string `protobuf:"bytes,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	// slug will look like /club/{club_name}/{date}. It should be
	// case-insensitive.
	Slug string `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *ClubSessionResponse) Reset() {
	*x = ClubSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubSessionResponse) ProtoMessage() {}

func (x *ClubSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubSessionResponse.ProtoReflect.Descriptor instead.
func (*ClubSessionResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{23}
}

func (x *ClubSessionResponse) GetTournamentId() string {
	if x != nil {
		return x.TournamentId
	}
	return ""
}

func (x *ClubSessionResponse) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type RecentClubSessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// club_id
	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Count  int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Offset int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *RecentClubSessionsRequest) Reset() {
	*x = RecentClubSessionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentClubSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentClubSessionsRequest) ProtoMessage() {}

func (x *RecentClubSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentClubSessionsRequest.ProtoReflect.Descriptor instead.
func (*RecentClubSessionsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{24}
}

func (x *RecentClubSessionsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecentClubSessionsRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RecentClubSessionsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ClubSessionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions []*ClubSessionResponse `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *ClubSessionsResponse) Reset() {
	*x = ClubSessionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClubSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClubSessionsResponse) ProtoMessage() {}

func (x *ClubSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_tournament_service_tournament_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClubSessionsResponse.ProtoReflect.Descriptor instead.
func (*ClubSessionsResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP(), []int{25}
}

func (x *ClubSessionsResponse) GetSessions() []*ClubSessionResponse {
	if x != nil {
		return x.Sessions
	}
	return nil
}

var File_api_proto_tournament_service_tournament_service_proto protoreflect.FileDescriptor

var file_api_proto_tournament_service_tournament_service_proto_rawDesc = []byte{
	0x0a, 0x35, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x21, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2f,
	0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x4e, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22,
	0xbe, 0x01, 0x0a, 0x14, 0x4e, 0x65, 0x77, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xce, 0x03, 0x0a, 0x12, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x48, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6c, 0x75, 0x62,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6c,
	0x75, 0x62, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x66, 0x72,
	0x65, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6c, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x19, 0x66, 0x72, 0x65, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x22, 0x62, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x42, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9c, 0x01, 0x0a, 0x1a, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x69, 0x72, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f,
	0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x47, 0x0a, 0x19, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x18, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74,
	0x77, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x77, 0x6f, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x91,
	0x01, 0x0a, 0x19, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x70, 0x61, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e,
	0x67, 0x73, 0x22, 0x92, 0x04, 0x0a, 0x1f, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x77, 0x6f, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4f, 0x6e, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x77, 0x6f, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f,
	0x6e, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x49, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x54, 0x77, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x0f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x67, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6d,
	0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61,
	0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x92, 0x01, 0x0a, 0x24, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x22, 0x14, 0x0a, 0x12,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3b, 0x0a, 0x15, 0x4e, 0x65, 0x77, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22,
	0x42, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x17, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7e, 0x0a, 0x1a, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x59, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x75, 0x6d, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6e, 0x75, 0x6d, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0x4e, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x45, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0x2a, 0x0a, 0x18, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x22, 0x0a,
	0x10, 0x55, 0x6e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x20, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x15, 0x4e, 0x65, 0x77, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x6c, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6c, 0x75, 0x62, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x13, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0x59, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x75, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0x5b, 0x0a, 0x14, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x6c, 0x75, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x36, 0x0a,
	0x05, 0x54, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41,
	0x52, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4c, 0x55, 0x42, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x47,
	0x41, 0x43, 0x59, 0x10, 0x03, 0x32, 0xf1, 0x12, 0x0a, 0x11, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x0d, 0x4e,
	0x65, 0x77, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x79, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x67, 0x0a, 0x10, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x71, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x09, 0x50, 0x61, 0x69, 0x72, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x24, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x70, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x2e, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5a, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x1e, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58,
	0x0a, 0x13, 0x53, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x19, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73,
	0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x73, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x1a, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x1a, 0x26, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x0e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x12, 0x1a, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x1a, 0x26, 0x2e, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x73, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x53, 0x65, 0x74,
	0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68,
	0x0a, 0x09, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x2e, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12,
	0x38, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x67, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x62, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x43,
	0x6c, 0x75, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x75, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x62, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x11,
	0x55, 0x6e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2c, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x09, 0x55, 0x6e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x12, 0x24, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x12, 0x22, 0x2e,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x6f, 0x31, 0x34,
	0x2f, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_api_proto_tournament_service_tournament_service_proto_rawDescOnce sync.Once
	file_api_proto_tournament_service_tournament_service_proto_rawDescData = file_api_proto_tournament_service_tournament_service_proto_rawDesc
)

func file_api_proto_tournament_service_tournament_service_proto_rawDescGZIP() []byte {
	file_api_proto_tournament_service_tournament_service_proto_rawDescOnce.Do(func() {
		file_api_proto_tournament_service_tournament_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_tournament_service_tournament_service_proto_rawDescData)
	})
	return file_api_proto_tournament_service_tournament_service_proto_rawDescData
}

var file_api_proto_tournament_service_tournament_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_proto_tournament_service_tournament_service_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_api_proto_tournament_service_tournament_service_proto_goTypes = []interface{}{
	(TType)(0),                                   // 0: tournament_service.TType
	(*StartRoundRequest)(nil),                    // 1: tournament_service.StartRoundRequest
	(*NewTournamentRequest)(nil),                 // 2: tournament_service.NewTournamentRequest
	(*TournamentMetadata)(nil),                   // 3: tournament_service.TournamentMetadata
	(*SetTournamentMetadataRequest)(nil),         // 4: tournament_service.SetTournamentMetadataRequest
	(*SingleRoundControlsRequest)(nil),           // 5: tournament_service.SingleRoundControlsRequest
	(*PairRoundRequest)(nil),                     // 6: tournament_service.PairRoundRequest
	(*TournamentDivisionRequest)(nil),            // 7: tournament_service.TournamentDivisionRequest
	(*TournamentPairingRequest)(nil),             // 8: tournament_service.TournamentPairingRequest
	(*TournamentPairingsRequest)(nil),            // 9: tournament_service.TournamentPairingsRequest
	(*TournamentResultOverrideRequest)(nil),      // 10: tournament_service.TournamentResultOverrideRequest
	(*TournamentStartRoundCountdownRequest)(nil), // 11: tournament_service.TournamentStartRoundCountdownRequest
	(*TournamentResponse)(nil),                   // 12: tournament_service.TournamentResponse
	(*NewTournamentResponse)(nil),                // 13: tournament_service.NewTournamentResponse
	(*GetTournamentMetadataRequest)(nil),         // 14: tournament_service.GetTournamentMetadataRequest
	(*GetTournamentRequest)(nil),                 // 15: tournament_service.GetTournamentRequest
	(*FinishTournamentRequest)(nil),              // 16: tournament_service.FinishTournamentRequest
	(*TournamentMetadataResponse)(nil),           // 17: tournament_service.TournamentMetadataResponse
	(*RecentGamesRequest)(nil),                   // 18: tournament_service.RecentGamesRequest
	(*RecentGamesResponse)(nil),                  // 19: tournament_service.RecentGamesResponse
	(*UnstartTournamentRequest)(nil),             // 20: tournament_service.UnstartTournamentRequest
	(*UncheckInRequest)(nil),                     // 21: tournament_service.UncheckInRequest
	(*CheckinRequest)(nil),                       // 22: tournament_service.CheckinRequest
	(*NewClubSessionRequest)(nil),                // 23: tournament_service.NewClubSessionRequest
	(*ClubSessionResponse)(nil),                  // 24: tournament_service.ClubSessionResponse
	(*RecentClubSessionsRequest)(nil),            // 25: tournament_service.RecentClubSessionsRequest
	(*ClubSessionsResponse)(nil),                 // 26: tournament_service.ClubSessionsResponse
	(*realtime.GameRequest)(nil),                 // 27: liwords.GameRequest
	(*realtime.RoundControl)(nil),                // 28: liwords.RoundControl
	(realtime.TournamentGameResult)(0),           // 29: liwords.TournamentGameResult
	(realtime.GameEndReason)(0),                  // 30: liwords.GameEndReason
	(*realtime.TournamentGameEndedEvent)(nil),    // 31: liwords.TournamentGameEndedEvent
	(*timestamppb.Timestamp)(nil),                // 32: google.protobuf.Timestamp
	(*realtime.DivisionRoundControls)(nil),       // 33: liwords.DivisionRoundControls
	(*realtime.DivisionControls)(nil),            // 34: liwords.DivisionControls
	(*realtime.TournamentPersons)(nil),           // 35: liwords.TournamentPersons
	(*realtime.FullTournamentDivisions)(nil),     // 36: liwords.FullTournamentDivisions
}
var file_api_proto_tournament_service_tournament_service_proto_depIdxs = []int32{
	0,  // 0: tournament_service.NewTournamentRequest.type:type_name -> tournament_service.TType
	0,  // 1: tournament_service.TournamentMetadata.type:type_name -> tournament_service.TType
	27, // 2: tournament_service.TournamentMetadata.default_club_settings:type_name -> liwords.GameRequest
	3,  // 3: tournament_service.SetTournamentMetadataRequest.metadata:type_name -> tournament_service.TournamentMetadata
	28, // 4: tournament_service.SingleRoundControlsRequest.round_controls:type_name -> liwords.RoundControl
	8,  // 5: tournament_service.TournamentPairingsRequest.pairings:type_name -> tournament_service.TournamentPairingRequest
	29, // 6: tournament_service.TournamentResultOverrideRequest.player_one_result:type_name -> liwords.TournamentGameResult
	29, // 7: tournament_service.TournamentResultOverrideRequest.player_two_result:type_name -> liwords.TournamentGameResult
	30, // 8: tournament_service.TournamentResultOverrideRequest.game_end_reason:type_name -> liwords.GameEndReason
	3,  // 9: tournament_service.TournamentMetadataResponse.metadata:type_name -> tournament_service.TournamentMetadata
	31, // 10: tournament_service.RecentGamesResponse.games:type_name -> liwords.TournamentGameEndedEvent
	32, // 11: tournament_service.NewClubSessionRequest.date:type_name -> google.protobuf.Timestamp
	24, // 12: tournament_service.ClubSessionsResponse.sessions:type_name -> tournament_service.ClubSessionResponse
	2,  // 13: tournament_service.TournamentService.NewTournament:input_type -> tournament_service.NewTournamentRequest
	14, // 14: tournament_service.TournamentService.GetTournamentMetadata:input_type -> tournament_service.GetTournamentMetadataRequest
	15, // 15: tournament_service.TournamentService.GetTournament:input_type -> tournament_service.GetTournamentRequest
	16, // 16: tournament_service.TournamentService.FinishTournament:input_type -> tournament_service.FinishTournamentRequest
	4,  // 17: tournament_service.TournamentService.SetTournamentMetadata:input_type -> tournament_service.SetTournamentMetadataRequest
	6,  // 18: tournament_service.TournamentService.PairRound:input_type -> tournament_service.PairRoundRequest
	5,  // 19: tournament_service.TournamentService.SetSingleRoundControls:input_type -> tournament_service.SingleRoundControlsRequest
	33, // 20: tournament_service.TournamentService.SetRoundControls:input_type -> liwords.DivisionRoundControls
	34, // 21: tournament_service.TournamentService.SetDivisionControls:input_type -> liwords.DivisionControls
	35, // 22: tournament_service.TournamentService.AddDirectors:input_type -> liwords.TournamentPersons
	35, // 23: tournament_service.TournamentService.RemoveDirectors:input_type -> liwords.TournamentPersons
	7,  // 24: tournament_service.TournamentService.AddDivision:input_type -> tournament_service.TournamentDivisionRequest
	7,  // 25: tournament_service.TournamentService.RemoveDivision:input_type -> tournament_service.TournamentDivisionRequest
	35, // 26: tournament_service.TournamentService.AddPlayers:input_type -> liwords.TournamentPersons
	35, // 27: tournament_service.TournamentService.RemovePlayers:input_type -> liwords.TournamentPersons
	9,  // 28: tournament_service.TournamentService.SetPairing:input_type -> tournament_service.TournamentPairingsRequest
	10, // 29: tournament_service.TournamentService.SetResult:input_type -> tournament_service.TournamentResultOverrideRequest
	11, // 30: tournament_service.TournamentService.StartRoundCountdown:input_type -> tournament_service.TournamentStartRoundCountdownRequest
	18, // 31: tournament_service.TournamentService.RecentGames:input_type -> tournament_service.RecentGamesRequest
	23, // 32: tournament_service.TournamentService.CreateClubSession:input_type -> tournament_service.NewClubSessionRequest
	25, // 33: tournament_service.TournamentService.GetRecentClubSessions:input_type -> tournament_service.RecentClubSessionsRequest
	20, // 34: tournament_service.TournamentService.UnstartTournament:input_type -> tournament_service.UnstartTournamentRequest
	21, // 35: tournament_service.TournamentService.UncheckIn:input_type -> tournament_service.UncheckInRequest
	22, // 36: tournament_service.TournamentService.CheckIn:input_type -> tournament_service.CheckinRequest
	13, // 37: tournament_service.TournamentService.NewTournament:output_type -> tournament_service.NewTournamentResponse
	17, // 38: tournament_service.TournamentService.GetTournamentMetadata:output_type -> tournament_service.TournamentMetadataResponse
	36, // 39: tournament_service.TournamentService.GetTournament:output_type -> liwords.FullTournamentDivisions
	12, // 40: tournament_service.TournamentService.FinishTournament:output_type -> tournament_service.TournamentResponse
	12, // 41: tournament_service.TournamentService.SetTournamentMetadata:output_type -> tournament_service.TournamentResponse
	12, // 42: tournament_service.TournamentService.PairRound:output_type -> tournament_service.TournamentResponse
	12, // 43: tournament_service.TournamentService.SetSingleRoundControls:output_type -> tournament_service.TournamentResponse
	12, // 44: tournament_service.TournamentService.SetRoundControls:output_type -> tournament_service.TournamentResponse
	12, // 45: tournament_service.TournamentService.SetDivisionControls:output_type -> tournament_service.TournamentResponse
	12, // 46: tournament_service.TournamentService.AddDirectors:output_type -> tournament_service.TournamentResponse
	12, // 47: tournament_service.TournamentService.RemoveDirectors:output_type -> tournament_service.TournamentResponse
	12, // 48: tournament_service.TournamentService.AddDivision:output_type -> tournament_service.TournamentResponse
	12, // 49: tournament_service.TournamentService.RemoveDivision:output_type -> tournament_service.TournamentResponse
	12, // 50: tournament_service.TournamentService.AddPlayers:output_type -> tournament_service.TournamentResponse
	12, // 51: tournament_service.TournamentService.RemovePlayers:output_type -> tournament_service.TournamentResponse
	12, // 52: tournament_service.TournamentService.SetPairing:output_type -> tournament_service.TournamentResponse
	12, // 53: tournament_service.TournamentService.SetResult:output_type -> tournament_service.TournamentResponse
	12, // 54: tournament_service.TournamentService.StartRoundCountdown:output_type -> tournament_service.TournamentResponse
	19, // 55: tournament_service.TournamentService.RecentGames:output_type -> tournament_service.RecentGamesResponse
	24, // 56: tournament_service.TournamentService.CreateClubSession:output_type -> tournament_service.ClubSessionResponse
	26, // 57: tournament_service.TournamentService.GetRecentClubSessions:output_type -> tournament_service.ClubSessionsResponse
	12, // 58: tournament_service.TournamentService.UnstartTournament:output_type -> tournament_service.TournamentResponse
	12, // 59: tournament_service.TournamentService.UncheckIn:output_type -> tournament_service.TournamentResponse
	12, // 60: tournament_service.TournamentService.CheckIn:output_type -> tournament_service.TournamentResponse
	37, // [37:61] is the sub-list for method output_type
	13, // [13:37] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_api_proto_tournament_service_tournament_service_proto_init() }
func file_api_proto_tournament_service_tournament_service_proto_init() {
	if File_api_proto_tournament_service_tournament_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRoundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTournamentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTournamentMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleRoundControlsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PairRoundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentDivisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentPairingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentPairingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentResultOverrideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentStartRoundCountdownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTournamentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTournamentMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTournamentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishTournamentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentGamesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentGamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnstartTournamentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UncheckInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewClubSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentClubSessionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_tournament_service_tournament_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClubSessionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_tournament_service_tournament_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_tournament_service_tournament_service_proto_goTypes,
		DependencyIndexes: file_api_proto_tournament_service_tournament_service_proto_depIdxs,
		EnumInfos:         file_api_proto_tournament_service_tournament_service_proto_enumTypes,
		MessageInfos:      file_api_proto_tournament_service_tournament_service_proto_msgTypes,
	}.Build()
	File_api_proto_tournament_service_tournament_service_proto = out.File
	file_api_proto_tournament_service_tournament_service_proto_rawDesc = nil
	file_api_proto_tournament_service_tournament_service_proto_goTypes = nil
	file_api_proto_tournament_service_tournament_service_proto_depIdxs = nil
}
