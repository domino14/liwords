// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: api/proto/realtime/realtime.proto

package realtime

import (
	macondo "github.com/domino14/macondo/gen/api/proto/macondo"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameMode int32

const (
	GameMode_REAL_TIME      GameMode = 0
	GameMode_CORRESPONDENCE GameMode = 1
)

// Enum value maps for GameMode.
var (
	GameMode_name = map[int32]string{
		0: "REAL_TIME",
		1: "CORRESPONDENCE",
	}
	GameMode_value = map[string]int32{
		"REAL_TIME":      0,
		"CORRESPONDENCE": 1,
	}
)

func (x GameMode) Enum() *GameMode {
	p := new(GameMode)
	*p = x
	return p
}

func (x GameMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameMode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_realtime_realtime_proto_enumTypes[0].Descriptor()
}

func (GameMode) Type() protoreflect.EnumType {
	return &file_api_proto_realtime_realtime_proto_enumTypes[0]
}

func (x GameMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameMode.Descriptor instead.
func (GameMode) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{0}
}

type RatingMode int32

const (
	RatingMode_RATED  RatingMode = 0
	RatingMode_CASUAL RatingMode = 1
)

// Enum value maps for RatingMode.
var (
	RatingMode_name = map[int32]string{
		0: "RATED",
		1: "CASUAL",
	}
	RatingMode_value = map[string]int32{
		"RATED":  0,
		"CASUAL": 1,
	}
)

func (x RatingMode) Enum() *RatingMode {
	p := new(RatingMode)
	*p = x
	return p
}

func (x RatingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RatingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_realtime_realtime_proto_enumTypes[1].Descriptor()
}

func (RatingMode) Type() protoreflect.EnumType {
	return &file_api_proto_realtime_realtime_proto_enumTypes[1]
}

func (x RatingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RatingMode.Descriptor instead.
func (RatingMode) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{1}
}

// In order to make socket messages as small and simple as possible,
// we should include the message type with the socket message.
// Whenever we add a new client <-> server socket message type,
// add it to this list.
type MessageType int32

const (
	MessageType_SEEK_REQUEST                        MessageType = 0
	MessageType_MATCH_REQUEST                       MessageType = 1
	MessageType_SOUGHT_GAME_PROCESS_EVENT           MessageType = 2
	MessageType_CLIENT_GAMEPLAY_EVENT               MessageType = 3
	MessageType_SERVER_GAMEPLAY_EVENT               MessageType = 4
	MessageType_GAME_ENDED_EVENT                    MessageType = 5
	MessageType_GAME_HISTORY_REFRESHER              MessageType = 6
	MessageType_ERROR_MESSAGE                       MessageType = 7
	MessageType_NEW_GAME_EVENT                      MessageType = 8
	MessageType_SERVER_CHALLENGE_RESULT_EVENT       MessageType = 9
	MessageType_SEEK_REQUESTS                       MessageType = 10
	MessageType_MATCH_REQUEST_CANCELLATION          MessageType = 11
	MessageType_ONGOING_GAME_EVENT                  MessageType = 12
	MessageType_TIMED_OUT                           MessageType = 13
	MessageType_ONGOING_GAMES                       MessageType = 14
	MessageType_READY_FOR_TOURNAMENT_GAME           MessageType = 15
	MessageType_TOURNAMENT_ROUND_STARTED            MessageType = 16
	MessageType_GAME_DELETION                       MessageType = 17
	MessageType_MATCH_REQUESTS                      MessageType = 18
	MessageType_DECLINE_MATCH_REQUEST               MessageType = 19
	MessageType_CHAT_MESSAGE                        MessageType = 20
	MessageType_USER_PRESENCE                       MessageType = 22
	MessageType_USER_PRESENCES                      MessageType = 23
	MessageType_SERVER_MESSAGE                      MessageType = 24
	MessageType_READY_FOR_GAME                      MessageType = 25
	MessageType_LAG_MEASUREMENT                     MessageType = 26
	MessageType_TOURNAMENT_GAME_ENDED_EVENT         MessageType = 27
	MessageType_TOURNAMENT_MESSAGE                  MessageType = 28 // used for TournamentDataResponse
	MessageType_REMATCH_STARTED                     MessageType = 29
	MessageType_TOURNAMENT_DIVISION_MESSAGE         MessageType = 30
	MessageType_TOURNAMENT_DIVISION_DELETED_MESSAGE MessageType = 31
	MessageType_TOURNAMENT_FULL_DIVISIONS_MESSAGE   MessageType = 32
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:  "SEEK_REQUEST",
		1:  "MATCH_REQUEST",
		2:  "SOUGHT_GAME_PROCESS_EVENT",
		3:  "CLIENT_GAMEPLAY_EVENT",
		4:  "SERVER_GAMEPLAY_EVENT",
		5:  "GAME_ENDED_EVENT",
		6:  "GAME_HISTORY_REFRESHER",
		7:  "ERROR_MESSAGE",
		8:  "NEW_GAME_EVENT",
		9:  "SERVER_CHALLENGE_RESULT_EVENT",
		10: "SEEK_REQUESTS",
		11: "MATCH_REQUEST_CANCELLATION",
		12: "ONGOING_GAME_EVENT",
		13: "TIMED_OUT",
		14: "ONGOING_GAMES",
		15: "READY_FOR_TOURNAMENT_GAME",
		16: "TOURNAMENT_ROUND_STARTED",
		17: "GAME_DELETION",
		18: "MATCH_REQUESTS",
		19: "DECLINE_MATCH_REQUEST",
		20: "CHAT_MESSAGE",
		22: "USER_PRESENCE",
		23: "USER_PRESENCES",
		24: "SERVER_MESSAGE",
		25: "READY_FOR_GAME",
		26: "LAG_MEASUREMENT",
		27: "TOURNAMENT_GAME_ENDED_EVENT",
		28: "TOURNAMENT_MESSAGE",
		29: "REMATCH_STARTED",
		30: "TOURNAMENT_DIVISION_MESSAGE",
		31: "TOURNAMENT_DIVISION_DELETED_MESSAGE",
		32: "TOURNAMENT_FULL_DIVISIONS_MESSAGE",
	}
	MessageType_value = map[string]int32{
		"SEEK_REQUEST":                        0,
		"MATCH_REQUEST":                       1,
		"SOUGHT_GAME_PROCESS_EVENT":           2,
		"CLIENT_GAMEPLAY_EVENT":               3,
		"SERVER_GAMEPLAY_EVENT":               4,
		"GAME_ENDED_EVENT":                    5,
		"GAME_HISTORY_REFRESHER":              6,
		"ERROR_MESSAGE":                       7,
		"NEW_GAME_EVENT":                      8,
		"SERVER_CHALLENGE_RESULT_EVENT":       9,
		"SEEK_REQUESTS":                       10,
		"MATCH_REQUEST_CANCELLATION":          11,
		"ONGOING_GAME_EVENT":                  12,
		"TIMED_OUT":                           13,
		"ONGOING_GAMES":                       14,
		"READY_FOR_TOURNAMENT_GAME":           15,
		"TOURNAMENT_ROUND_STARTED":            16,
		"GAME_DELETION":                       17,
		"MATCH_REQUESTS":                      18,
		"DECLINE_MATCH_REQUEST":               19,
		"CHAT_MESSAGE":                        20,
		"USER_PRESENCE":                       22,
		"USER_PRESENCES":                      23,
		"SERVER_MESSAGE":                      24,
		"READY_FOR_GAME":                      25,
		"LAG_MEASUREMENT":                     26,
		"TOURNAMENT_GAME_ENDED_EVENT":         27,
		"TOURNAMENT_MESSAGE":                  28,
		"REMATCH_STARTED":                     29,
		"TOURNAMENT_DIVISION_MESSAGE":         30,
		"TOURNAMENT_DIVISION_DELETED_MESSAGE": 31,
		"TOURNAMENT_FULL_DIVISIONS_MESSAGE":   32,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_realtime_realtime_proto_enumTypes[2].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_api_proto_realtime_realtime_proto_enumTypes[2]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{2}
}

type GameEndReason int32

const (
	// NONE: the game has not yet ended!
	GameEndReason_NONE GameEndReason = 0
	// TIME: one person timed out (and lost)
	GameEndReason_TIME GameEndReason = 1
	// WENT_OUT: game ended regularly, with one person having zero tiles on their
	// rack.
	GameEndReason_STANDARD GameEndReason = 2
	// 6 consecutive zeroes ends the game.
	GameEndReason_CONSECUTIVE_ZEROES GameEndReason = 3
	GameEndReason_RESIGNED           GameEndReason = 4
	// Aborted games are aborted by mutual agreement.
	GameEndReason_ABORTED          GameEndReason = 5
	GameEndReason_TRIPLE_CHALLENGE GameEndReason = 6
	// CANCELLED means the game never started. Game start signal was not sent.
	GameEndReason_CANCELLED GameEndReason = 7
	// FORCE_FORFEIT is a way to force an opponent to take a loss if they left a
	// game early without resigining.
	GameEndReason_FORCE_FORFEIT GameEndReason = 8
)

// Enum value maps for GameEndReason.
var (
	GameEndReason_name = map[int32]string{
		0: "NONE",
		1: "TIME",
		2: "STANDARD",
		3: "CONSECUTIVE_ZEROES",
		4: "RESIGNED",
		5: "ABORTED",
		6: "TRIPLE_CHALLENGE",
		7: "CANCELLED",
		8: "FORCE_FORFEIT",
	}
	GameEndReason_value = map[string]int32{
		"NONE":               0,
		"TIME":               1,
		"STANDARD":           2,
		"CONSECUTIVE_ZEROES": 3,
		"RESIGNED":           4,
		"ABORTED":            5,
		"TRIPLE_CHALLENGE":   6,
		"CANCELLED":          7,
		"FORCE_FORFEIT":      8,
	}
)

func (x GameEndReason) Enum() *GameEndReason {
	p := new(GameEndReason)
	*p = x
	return p
}

func (x GameEndReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameEndReason) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_realtime_realtime_proto_enumTypes[3].Descriptor()
}

func (GameEndReason) Type() protoreflect.EnumType {
	return &file_api_proto_realtime_realtime_proto_enumTypes[3]
}

func (x GameEndReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameEndReason.Descriptor instead.
func (GameEndReason) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{3}
}

type TournamentGameResult int32

const (
	// NO_RESULT: the game is not over
	TournamentGameResult_NO_RESULT    TournamentGameResult = 0
	TournamentGameResult_WIN          TournamentGameResult = 1
	TournamentGameResult_LOSS         TournamentGameResult = 2
	TournamentGameResult_DRAW         TournamentGameResult = 3
	TournamentGameResult_BYE          TournamentGameResult = 4
	TournamentGameResult_FORFEIT_WIN  TournamentGameResult = 5
	TournamentGameResult_FORFEIT_LOSS TournamentGameResult = 6
	// ELIMINATED: player is eliminated in a bracket tournament
	TournamentGameResult_ELIMINATED TournamentGameResult = 7
)

// Enum value maps for TournamentGameResult.
var (
	TournamentGameResult_name = map[int32]string{
		0: "NO_RESULT",
		1: "WIN",
		2: "LOSS",
		3: "DRAW",
		4: "BYE",
		5: "FORFEIT_WIN",
		6: "FORFEIT_LOSS",
		7: "ELIMINATED",
	}
	TournamentGameResult_value = map[string]int32{
		"NO_RESULT":    0,
		"WIN":          1,
		"LOSS":         2,
		"DRAW":         3,
		"BYE":          4,
		"FORFEIT_WIN":  5,
		"FORFEIT_LOSS": 6,
		"ELIMINATED":   7,
	}
)

func (x TournamentGameResult) Enum() *TournamentGameResult {
	p := new(TournamentGameResult)
	*p = x
	return p
}

func (x TournamentGameResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TournamentGameResult) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_realtime_realtime_proto_enumTypes[4].Descriptor()
}

func (TournamentGameResult) Type() protoreflect.EnumType {
	return &file_api_proto_realtime_realtime_proto_enumTypes[4]
}

func (x TournamentGameResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TournamentGameResult.Descriptor instead.
func (TournamentGameResult) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{4}
}

type PairingMethod int32

const (
	PairingMethod_RANDOM           PairingMethod = 0
	PairingMethod_ROUND_ROBIN      PairingMethod = 1
	PairingMethod_KING_OF_THE_HILL PairingMethod = 2
	PairingMethod_ELIMINATION      PairingMethod = 3
	PairingMethod_FACTOR           PairingMethod = 4
	PairingMethod_INITIAL_FONTES   PairingMethod = 5
	PairingMethod_SWISS            PairingMethod = 6
	PairingMethod_QUICKPAIR        PairingMethod = 7
	PairingMethod_MANUAL           PairingMethod = 8
)

// Enum value maps for PairingMethod.
var (
	PairingMethod_name = map[int32]string{
		0: "RANDOM",
		1: "ROUND_ROBIN",
		2: "KING_OF_THE_HILL",
		3: "ELIMINATION",
		4: "FACTOR",
		5: "INITIAL_FONTES",
		6: "SWISS",
		7: "QUICKPAIR",
		8: "MANUAL",
	}
	PairingMethod_value = map[string]int32{
		"RANDOM":           0,
		"ROUND_ROBIN":      1,
		"KING_OF_THE_HILL": 2,
		"ELIMINATION":      3,
		"FACTOR":           4,
		"INITIAL_FONTES":   5,
		"SWISS":            6,
		"QUICKPAIR":        7,
		"MANUAL":           8,
	}
)

func (x PairingMethod) Enum() *PairingMethod {
	p := new(PairingMethod)
	*p = x
	return p
}

func (x PairingMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PairingMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_realtime_realtime_proto_enumTypes[5].Descriptor()
}

func (PairingMethod) Type() protoreflect.EnumType {
	return &file_api_proto_realtime_realtime_proto_enumTypes[5]
}

func (x PairingMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PairingMethod.Descriptor instead.
func (PairingMethod) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{5}
}

type FirstMethod int32

const (
	FirstMethod_MANUAL_FIRST    FirstMethod = 0
	FirstMethod_RANDOM_FIRST    FirstMethod = 1
	FirstMethod_AUTOMATIC_FIRST FirstMethod = 2
)

// Enum value maps for FirstMethod.
var (
	FirstMethod_name = map[int32]string{
		0: "MANUAL_FIRST",
		1: "RANDOM_FIRST",
		2: "AUTOMATIC_FIRST",
	}
	FirstMethod_value = map[string]int32{
		"MANUAL_FIRST":    0,
		"RANDOM_FIRST":    1,
		"AUTOMATIC_FIRST": 2,
	}
)

func (x FirstMethod) Enum() *FirstMethod {
	p := new(FirstMethod)
	*p = x
	return p
}

func (x FirstMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FirstMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_realtime_realtime_proto_enumTypes[6].Descriptor()
}

func (FirstMethod) Type() protoreflect.EnumType {
	return &file_api_proto_realtime_realtime_proto_enumTypes[6]
}

func (x FirstMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FirstMethod.Descriptor instead.
func (FirstMethod) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{6}
}

type ClientGameplayEvent_EventType int32

const (
	ClientGameplayEvent_TILE_PLACEMENT ClientGameplayEvent_EventType = 0
	ClientGameplayEvent_PASS           ClientGameplayEvent_EventType = 1
	ClientGameplayEvent_EXCHANGE       ClientGameplayEvent_EventType = 2
	ClientGameplayEvent_CHALLENGE_PLAY ClientGameplayEvent_EventType = 3
	ClientGameplayEvent_RESIGN         ClientGameplayEvent_EventType = 4
)

// Enum value maps for ClientGameplayEvent_EventType.
var (
	ClientGameplayEvent_EventType_name = map[int32]string{
		0: "TILE_PLACEMENT",
		1: "PASS",
		2: "EXCHANGE",
		3: "CHALLENGE_PLAY",
		4: "RESIGN",
	}
	ClientGameplayEvent_EventType_value = map[string]int32{
		"TILE_PLACEMENT": 0,
		"PASS":           1,
		"EXCHANGE":       2,
		"CHALLENGE_PLAY": 3,
		"RESIGN":         4,
	}
)

func (x ClientGameplayEvent_EventType) Enum() *ClientGameplayEvent_EventType {
	p := new(ClientGameplayEvent_EventType)
	*p = x
	return p
}

func (x ClientGameplayEvent_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientGameplayEvent_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_realtime_realtime_proto_enumTypes[7].Descriptor()
}

func (ClientGameplayEvent_EventType) Type() protoreflect.EnumType {
	return &file_api_proto_realtime_realtime_proto_enumTypes[7]
}

func (x ClientGameplayEvent_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientGameplayEvent_EventType.Descriptor instead.
func (ClientGameplayEvent_EventType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{26, 0}
}

// A GameRules is just the name of a board layout + the name of a letter
// distribution. These must exist in a database or file somewhere.
type GameRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoardLayoutName        string `protobuf:"bytes,1,opt,name=board_layout_name,json=boardLayoutName,proto3" json:"board_layout_name,omitempty"`
	LetterDistributionName string `protobuf:"bytes,2,opt,name=letter_distribution_name,json=letterDistributionName,proto3" json:"letter_distribution_name,omitempty"`
	// If blank, variant is classic, otherwise it could be some other game
	// (a is worth 100, dogworms, etc.)
	VariantName string `protobuf:"bytes,3,opt,name=variant_name,json=variantName,proto3" json:"variant_name,omitempty"`
}

func (x *GameRules) Reset() {
	*x = GameRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameRules) ProtoMessage() {}

func (x *GameRules) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameRules.ProtoReflect.Descriptor instead.
func (*GameRules) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{0}
}

func (x *GameRules) GetBoardLayoutName() string {
	if x != nil {
		return x.BoardLayoutName
	}
	return ""
}

func (x *GameRules) GetLetterDistributionName() string {
	if x != nil {
		return x.LetterDistributionName
	}
	return ""
}

func (x *GameRules) GetVariantName() string {
	if x != nil {
		return x.VariantName
	}
	return ""
}

type GameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lexicon            string                `protobuf:"bytes,1,opt,name=lexicon,proto3" json:"lexicon,omitempty"`
	Rules              *GameRules            `protobuf:"bytes,2,opt,name=rules,proto3" json:"rules,omitempty"`
	InitialTimeSeconds int32                 `protobuf:"varint,3,opt,name=initial_time_seconds,json=initialTimeSeconds,proto3" json:"initial_time_seconds,omitempty"`
	IncrementSeconds   int32                 `protobuf:"varint,4,opt,name=increment_seconds,json=incrementSeconds,proto3" json:"increment_seconds,omitempty"`
	ChallengeRule      macondo.ChallengeRule `protobuf:"varint,5,opt,name=challenge_rule,json=challengeRule,proto3,enum=macondo.ChallengeRule" json:"challenge_rule,omitempty"`
	GameMode           GameMode              `protobuf:"varint,6,opt,name=game_mode,json=gameMode,proto3,enum=liwords.GameMode" json:"game_mode,omitempty"`
	RatingMode         RatingMode            `protobuf:"varint,7,opt,name=rating_mode,json=ratingMode,proto3,enum=liwords.RatingMode" json:"rating_mode,omitempty"`
	RequestId          string                `protobuf:"bytes,8,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	MaxOvertimeMinutes int32                 `protobuf:"varint,9,opt,name=max_overtime_minutes,json=maxOvertimeMinutes,proto3" json:"max_overtime_minutes,omitempty"`
	PlayerVsBot        bool                  `protobuf:"varint,10,opt,name=player_vs_bot,json=playerVsBot,proto3" json:"player_vs_bot,omitempty"`
	OriginalRequestId  string                `protobuf:"bytes,11,opt,name=original_request_id,json=originalRequestId,proto3" json:"original_request_id,omitempty"`
}

func (x *GameRequest) Reset() {
	*x = GameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameRequest) ProtoMessage() {}

func (x *GameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameRequest.ProtoReflect.Descriptor instead.
func (*GameRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{1}
}

func (x *GameRequest) GetLexicon() string {
	if x != nil {
		return x.Lexicon
	}
	return ""
}

func (x *GameRequest) GetRules() *GameRules {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *GameRequest) GetInitialTimeSeconds() int32 {
	if x != nil {
		return x.InitialTimeSeconds
	}
	return 0
}

func (x *GameRequest) GetIncrementSeconds() int32 {
	if x != nil {
		return x.IncrementSeconds
	}
	return 0
}

func (x *GameRequest) GetChallengeRule() macondo.ChallengeRule {
	if x != nil {
		return x.ChallengeRule
	}
	return macondo.ChallengeRule_VOID
}

func (x *GameRequest) GetGameMode() GameMode {
	if x != nil {
		return x.GameMode
	}
	return GameMode_REAL_TIME
}

func (x *GameRequest) GetRatingMode() RatingMode {
	if x != nil {
		return x.RatingMode
	}
	return RatingMode_RATED
}

func (x *GameRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GameRequest) GetMaxOvertimeMinutes() int32 {
	if x != nil {
		return x.MaxOvertimeMinutes
	}
	return 0
}

func (x *GameRequest) GetPlayerVsBot() bool {
	if x != nil {
		return x.PlayerVsBot
	}
	return false
}

func (x *GameRequest) GetOriginalRequestId() string {
	if x != nil {
		return x.OriginalRequestId
	}
	return ""
}

// A MatchUser requests or receives a match via a seek or a match request.
type MatchUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user_id is the database, or anonymous, ID of the user.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// relevant_rating is the rating of the user, for the relevant seek mode.
	RelevantRating string `protobuf:"bytes,2,opt,name=relevant_rating,json=relevantRating,proto3" json:"relevant_rating,omitempty"`
	// if is_anonymous, backend won't bother to look up the user in the DB.
	IsAnonymous bool `protobuf:"varint,3,opt,name=is_anonymous,json=isAnonymous,proto3" json:"is_anonymous,omitempty"`
	// display_name is the display username of the user (could be real name too)
	DisplayName string `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *MatchUser) Reset() {
	*x = MatchUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchUser) ProtoMessage() {}

func (x *MatchUser) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchUser.ProtoReflect.Descriptor instead.
func (*MatchUser) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{2}
}

func (x *MatchUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MatchUser) GetRelevantRating() string {
	if x != nil {
		return x.RelevantRating
	}
	return ""
}

func (x *MatchUser) GetIsAnonymous() bool {
	if x != nil {
		return x.IsAnonymous
	}
	return false
}

func (x *MatchUser) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type GameDeletion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GameDeletion) Reset() {
	*x = GameDeletion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameDeletion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameDeletion) ProtoMessage() {}

func (x *GameDeletion) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameDeletion.ProtoReflect.Descriptor instead.
func (*GameDeletion) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{3}
}

func (x *GameDeletion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type LagMeasurement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LagMs int32 `protobuf:"varint,1,opt,name=lag_ms,json=lagMs,proto3" json:"lag_ms,omitempty"`
}

func (x *LagMeasurement) Reset() {
	*x = LagMeasurement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LagMeasurement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LagMeasurement) ProtoMessage() {}

func (x *LagMeasurement) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LagMeasurement.ProtoReflect.Descriptor instead.
func (*LagMeasurement) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{4}
}

func (x *LagMeasurement) GetLagMs() int32 {
	if x != nil {
		return x.LagMs
	}
	return 0
}

type ChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Channel  string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Message  string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// timestamp is in milliseconds!
	Timestamp int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	UserId    string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{5}
}

func (x *ChatMessage) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ChatMessage) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *ChatMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ChatMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ChatMessage) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ChatMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*ChatMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *ChatMessages) Reset() {
	*x = ChatMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessages) ProtoMessage() {}

func (x *ChatMessages) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessages.ProtoReflect.Descriptor instead.
func (*ChatMessages) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{6}
}

func (x *ChatMessages) GetMessages() []*ChatMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type UserPresence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username    string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Channel     string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	IsAnonymous bool   `protobuf:"varint,4,opt,name=is_anonymous,json=isAnonymous,proto3" json:"is_anonymous,omitempty"`
	Deleting    bool   `protobuf:"varint,5,opt,name=deleting,proto3" json:"deleting,omitempty"`
}

func (x *UserPresence) Reset() {
	*x = UserPresence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPresence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPresence) ProtoMessage() {}

func (x *UserPresence) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPresence.ProtoReflect.Descriptor instead.
func (*UserPresence) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{7}
}

func (x *UserPresence) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserPresence) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserPresence) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *UserPresence) GetIsAnonymous() bool {
	if x != nil {
		return x.IsAnonymous
	}
	return false
}

func (x *UserPresence) GetDeleting() bool {
	if x != nil {
		return x.Deleting
	}
	return false
}

type UserPresences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Presences []*UserPresence `protobuf:"bytes,1,rep,name=presences,proto3" json:"presences,omitempty"`
}

func (x *UserPresences) Reset() {
	*x = UserPresences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPresences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPresences) ProtoMessage() {}

func (x *UserPresences) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPresences.ProtoReflect.Descriptor instead.
func (*UserPresences) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{8}
}

func (x *UserPresences) GetPresences() []*UserPresence {
	if x != nil {
		return x.Presences
	}
	return nil
}

type SeekRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameRequest   *GameRequest `protobuf:"bytes,1,opt,name=game_request,json=gameRequest,proto3" json:"game_request,omitempty"`
	User          *MatchUser   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	MinimumRating int32        `protobuf:"varint,3,opt,name=minimum_rating,json=minimumRating,proto3" json:"minimum_rating,omitempty"`
	MaximumRating int32        `protobuf:"varint,4,opt,name=maximum_rating,json=maximumRating,proto3" json:"maximum_rating,omitempty"`
	// connection_id is the websocket ID via which this game was requested.
	ConnectionId string `protobuf:"bytes,5,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *SeekRequest) Reset() {
	*x = SeekRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeekRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeekRequest) ProtoMessage() {}

func (x *SeekRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeekRequest.ProtoReflect.Descriptor instead.
func (*SeekRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{9}
}

func (x *SeekRequest) GetGameRequest() *GameRequest {
	if x != nil {
		return x.GameRequest
	}
	return nil
}

func (x *SeekRequest) GetUser() *MatchUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *SeekRequest) GetMinimumRating() int32 {
	if x != nil {
		return x.MinimumRating
	}
	return 0
}

func (x *SeekRequest) GetMaximumRating() int32 {
	if x != nil {
		return x.MaximumRating
	}
	return 0
}

func (x *SeekRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type MatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameRequest   *GameRequest `protobuf:"bytes,1,opt,name=game_request,json=gameRequest,proto3" json:"game_request,omitempty"`
	User          *MatchUser   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	ReceivingUser *MatchUser   `protobuf:"bytes,3,opt,name=receiving_user,json=receivingUser,proto3" json:"receiving_user,omitempty"`
	// rematch_for is the game ID that this Match Request is a rematch for (empty
	// if it isn't a rematch)
	RematchFor string `protobuf:"bytes,4,opt,name=rematch_for,json=rematchFor,proto3" json:"rematch_for,omitempty"`
	// connection_id is the websocket ID via which this game was requested.
	ConnectionId string `protobuf:"bytes,5,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// If this match request is part of a tournament, it is treated in a special
	// way. We are moving towards server-only matching during tournaments,
	// so the following will only be used in "clubhouse mode" / more free-form
	// clubs.
	TournamentId string `protobuf:"bytes,6,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
}

func (x *MatchRequest) Reset() {
	*x = MatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRequest) ProtoMessage() {}

func (x *MatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRequest.ProtoReflect.Descriptor instead.
func (*MatchRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{10}
}

func (x *MatchRequest) GetGameRequest() *GameRequest {
	if x != nil {
		return x.GameRequest
	}
	return nil
}

func (x *MatchRequest) GetUser() *MatchUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *MatchRequest) GetReceivingUser() *MatchUser {
	if x != nil {
		return x.ReceivingUser
	}
	return nil
}

func (x *MatchRequest) GetRematchFor() string {
	if x != nil {
		return x.RematchFor
	}
	return ""
}

func (x *MatchRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *MatchRequest) GetTournamentId() string {
	if x != nil {
		return x.TournamentId
	}
	return ""
}

type ReadyForGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (x *ReadyForGame) Reset() {
	*x = ReadyForGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadyForGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadyForGame) ProtoMessage() {}

func (x *ReadyForGame) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadyForGame.ProtoReflect.Descriptor instead.
func (*ReadyForGame) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{11}
}

func (x *ReadyForGame) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

// A SoughtGameProcessEvent gets sent when a match request (or seek request)
// get accepted (from client to server), or canceled -- when sent from server to
// client.
type SoughtGameProcessEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *SoughtGameProcessEvent) Reset() {
	*x = SoughtGameProcessEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoughtGameProcessEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoughtGameProcessEvent) ProtoMessage() {}

func (x *SoughtGameProcessEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoughtGameProcessEvent.ProtoReflect.Descriptor instead.
func (*SoughtGameProcessEvent) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{12}
}

func (x *SoughtGameProcessEvent) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// Server to client messages:
// When a Seeker cancels their outgoing match request:
type MatchRequestCancellation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *MatchRequestCancellation) Reset() {
	*x = MatchRequestCancellation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRequestCancellation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRequestCancellation) ProtoMessage() {}

func (x *MatchRequestCancellation) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRequestCancellation.ProtoReflect.Descriptor instead.
func (*MatchRequestCancellation) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{13}
}

func (x *MatchRequestCancellation) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// SeekRequests sends all open seek requests.
type SeekRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*SeekRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *SeekRequests) Reset() {
	*x = SeekRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeekRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeekRequests) ProtoMessage() {}

func (x *SeekRequests) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeekRequests.ProtoReflect.Descriptor instead.
func (*SeekRequests) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{14}
}

func (x *SeekRequests) GetRequests() []*SeekRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type MatchRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*MatchRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *MatchRequests) Reset() {
	*x = MatchRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRequests) ProtoMessage() {}

func (x *MatchRequests) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRequests.ProtoReflect.Descriptor instead.
func (*MatchRequests) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{15}
}

func (x *MatchRequests) GetRequests() []*MatchRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

// The server will send back a ServerGameplayEvent to a ClientGameplayEvent.
// The server will also send these asynchronously for opponent gameplay
// events.
type ServerGameplayEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event         *macondo.GameEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	GameId        string             `protobuf:"bytes,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	NewRack       string             `protobuf:"bytes,3,opt,name=new_rack,json=newRack,proto3" json:"new_rack,omitempty"`
	TimeRemaining int32              `protobuf:"varint,4,opt,name=time_remaining,json=timeRemaining,proto3" json:"time_remaining,omitempty"`
	Playing       macondo.PlayState  `protobuf:"varint,5,opt,name=playing,proto3,enum=macondo.PlayState" json:"playing,omitempty"`
	UserId        string             `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // the event has the nickname, but not the userid.
}

func (x *ServerGameplayEvent) Reset() {
	*x = ServerGameplayEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerGameplayEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGameplayEvent) ProtoMessage() {}

func (x *ServerGameplayEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGameplayEvent.ProtoReflect.Descriptor instead.
func (*ServerGameplayEvent) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{16}
}

func (x *ServerGameplayEvent) GetEvent() *macondo.GameEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ServerGameplayEvent) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *ServerGameplayEvent) GetNewRack() string {
	if x != nil {
		return x.NewRack
	}
	return ""
}

func (x *ServerGameplayEvent) GetTimeRemaining() int32 {
	if x != nil {
		return x.TimeRemaining
	}
	return 0
}

func (x *ServerGameplayEvent) GetPlaying() macondo.PlayState {
	if x != nil {
		return x.Playing
	}
	return macondo.PlayState_PLAYING
}

func (x *ServerGameplayEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// The server will send back a challenge result event only in the case of
// a challenge. In all other cases, the server will send back a
// ServerGameplayEvent, and the front-end can
// A ServerChallengeResultEvent is sent back along with a GameHistoryRefresher
// when there is a challenge, instead of trying to reconstruct and send the
// right incremental events. The reason is that the logic is complex and
// has many special cases, and is already fully implemented in Macondo.
// We don't wish to re-implement it both in this repo's backend and frontend.
type ServerChallengeResultEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid         bool                  `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Challenger    string                `protobuf:"bytes,2,opt,name=challenger,proto3" json:"challenger,omitempty"`
	ChallengeRule macondo.ChallengeRule `protobuf:"varint,3,opt,name=challenge_rule,json=challengeRule,proto3,enum=macondo.ChallengeRule" json:"challenge_rule,omitempty"`
}

func (x *ServerChallengeResultEvent) Reset() {
	*x = ServerChallengeResultEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerChallengeResultEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerChallengeResultEvent) ProtoMessage() {}

func (x *ServerChallengeResultEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerChallengeResultEvent.ProtoReflect.Descriptor instead.
func (*ServerChallengeResultEvent) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{17}
}

func (x *ServerChallengeResultEvent) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ServerChallengeResultEvent) GetChallenger() string {
	if x != nil {
		return x.Challenger
	}
	return ""
}

func (x *ServerChallengeResultEvent) GetChallengeRule() macondo.ChallengeRule {
	if x != nil {
		return x.ChallengeRule
	}
	return macondo.ChallengeRule_VOID
}

// GameEndedEvent is always sent from the server to both clients.
type GameEndedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scores     map[string]int32 `protobuf:"bytes,1,rep,name=scores,proto3" json:"scores,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NewRatings map[string]int32 `protobuf:"bytes,2,rep,name=new_ratings,json=newRatings,proto3" json:"new_ratings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	EndReason  GameEndReason    `protobuf:"varint,3,opt,name=end_reason,json=endReason,proto3,enum=liwords.GameEndReason" json:"end_reason,omitempty"`
	// The winner is not always the highest scoring player; one player can
	// time out. The end_reason should make it clear what happened.
	Winner string `protobuf:"bytes,4,opt,name=winner,proto3" json:"winner,omitempty"`
	Loser  string `protobuf:"bytes,5,opt,name=loser,proto3" json:"loser,omitempty"`
	// If it was a tie, the winner and loser above can be interchanged.
	Tie bool `protobuf:"varint,6,opt,name=tie,proto3" json:"tie,omitempty"`
	// Time that the game ended
	Time         int64            `protobuf:"varint,7,opt,name=time,proto3" json:"time,omitempty"`
	RatingDeltas map[string]int32 `protobuf:"bytes,8,rep,name=rating_deltas,json=ratingDeltas,proto3" json:"rating_deltas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Send the full game history again. This will have rack information in it.
	History *macondo.GameHistory `protobuf:"bytes,9,opt,name=history,proto3" json:"history,omitempty"`
}

func (x *GameEndedEvent) Reset() {
	*x = GameEndedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEndedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEndedEvent) ProtoMessage() {}

func (x *GameEndedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEndedEvent.ProtoReflect.Descriptor instead.
func (*GameEndedEvent) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{18}
}

func (x *GameEndedEvent) GetScores() map[string]int32 {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *GameEndedEvent) GetNewRatings() map[string]int32 {
	if x != nil {
		return x.NewRatings
	}
	return nil
}

func (x *GameEndedEvent) GetEndReason() GameEndReason {
	if x != nil {
		return x.EndReason
	}
	return GameEndReason_NONE
}

func (x *GameEndedEvent) GetWinner() string {
	if x != nil {
		return x.Winner
	}
	return ""
}

func (x *GameEndedEvent) GetLoser() string {
	if x != nil {
		return x.Loser
	}
	return ""
}

func (x *GameEndedEvent) GetTie() bool {
	if x != nil {
		return x.Tie
	}
	return false
}

func (x *GameEndedEvent) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GameEndedEvent) GetRatingDeltas() map[string]int32 {
	if x != nil {
		return x.RatingDeltas
	}
	return nil
}

func (x *GameEndedEvent) GetHistory() *macondo.GameHistory {
	if x != nil {
		return x.History
	}
	return nil
}

// TournamentGameEndedEvent gets sent to a tournament channel when a game is
// over. This is a legacy way of showing tournament results right in the
// tournament lobby in realtime. New tournaments will use full tournament
// messages (specifically, TournamentDivisionDataResponse et al).
// This event is also used in the tournament_service's RecentGamesResponse,
// which can be used to fetch information for the last games played in
// a tournament.
type TournamentGameEndedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId    string                             `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Players   []*TournamentGameEndedEvent_Player `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
	EndReason GameEndReason                      `protobuf:"varint,3,opt,name=end_reason,json=endReason,proto3,enum=liwords.GameEndReason" json:"end_reason,omitempty"`
	// Time that the game ended
	Time      int64  `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	Round     int32  `protobuf:"varint,5,opt,name=round,proto3" json:"round,omitempty"`
	Division  string `protobuf:"bytes,6,opt,name=division,proto3" json:"division,omitempty"`
	GameIndex int32  `protobuf:"varint,7,opt,name=game_index,json=gameIndex,proto3" json:"game_index,omitempty"`
}

func (x *TournamentGameEndedEvent) Reset() {
	*x = TournamentGameEndedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentGameEndedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentGameEndedEvent) ProtoMessage() {}

func (x *TournamentGameEndedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentGameEndedEvent.ProtoReflect.Descriptor instead.
func (*TournamentGameEndedEvent) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{19}
}

func (x *TournamentGameEndedEvent) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *TournamentGameEndedEvent) GetPlayers() []*TournamentGameEndedEvent_Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *TournamentGameEndedEvent) GetEndReason() GameEndReason {
	if x != nil {
		return x.EndReason
	}
	return GameEndReason_NONE
}

func (x *TournamentGameEndedEvent) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TournamentGameEndedEvent) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TournamentGameEndedEvent) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *TournamentGameEndedEvent) GetGameIndex() int32 {
	if x != nil {
		return x.GameIndex
	}
	return 0
}

// This message makes the "Status Bar" show up and also tells the players
// that the backend is now accepting "ready" messages for this round.
type TournamentRoundStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId string                 `protobuf:"bytes,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Division     string                 `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Round        int32                  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	GameIndex    int32                  `protobuf:"varint,4,opt,name=game_index,json=gameIndex,proto3" json:"game_index,omitempty"` // for matchplay type rounds etc.
	Deadline     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (x *TournamentRoundStarted) Reset() {
	*x = TournamentRoundStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentRoundStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentRoundStarted) ProtoMessage() {}

func (x *TournamentRoundStarted) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentRoundStarted.ProtoReflect.Descriptor instead.
func (*TournamentRoundStarted) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{20}
}

func (x *TournamentRoundStarted) GetTournamentId() string {
	if x != nil {
		return x.TournamentId
	}
	return ""
}

func (x *TournamentRoundStarted) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *TournamentRoundStarted) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TournamentRoundStarted) GetGameIndex() int32 {
	if x != nil {
		return x.GameIndex
	}
	return 0
}

func (x *TournamentRoundStarted) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

// RematchStartedEvent gets sent to a game for which there is a rematch.
// It notifies that observers of the game that a rematch has started.
type RematchStartedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// rematch_game_id is the new game ID.
	RematchGameId string `protobuf:"bytes,1,opt,name=rematch_game_id,json=rematchGameId,proto3" json:"rematch_game_id,omitempty"`
}

func (x *RematchStartedEvent) Reset() {
	*x = RematchStartedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RematchStartedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RematchStartedEvent) ProtoMessage() {}

func (x *RematchStartedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RematchStartedEvent.ProtoReflect.Descriptor instead.
func (*RematchStartedEvent) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{21}
}

func (x *RematchStartedEvent) GetRematchGameId() string {
	if x != nil {
		return x.RematchGameId
	}
	return ""
}

// A GameHistoryRefresher is sent to both players when the game starts,
// and any observers at the time that they begin observing. It can also be sent
// to a player who reconnects in the middle of a game.
type GameHistoryRefresher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The history contains all the moves, points, as well as the last known racks
	// of each player. It also implicitly contains whose turn it is at the moment,
	// by the events / turns in the history.
	// The front-end is responsible for showing all this information in a nice
	// format.
	// Note: the racks of each player should not be sent to both players, only
	// to observers. The back-end will have to be smart enough to overwrite
	// this information with a blank string before sending it. It might not
	// even be that great of a big deal, as I'm sure people can devise other ways
	// to cheat, but shrug.
	History *macondo.GameHistory `protobuf:"bytes,1,opt,name=history,proto3" json:"history,omitempty"`
	// These represent how much time each player has remaining on their clock
	// as of the "refresher", in milliseconds.
	// player1 is the player who is listed first in the game history, regardless
	// of whether they went first.
	TimePlayer1        int32 `protobuf:"varint,2,opt,name=time_player1,json=timePlayer1,proto3" json:"time_player1,omitempty"`
	TimePlayer2        int32 `protobuf:"varint,3,opt,name=time_player2,json=timePlayer2,proto3" json:"time_player2,omitempty"`
	MaxOvertimeMinutes int32 `protobuf:"varint,4,opt,name=max_overtime_minutes,json=maxOvertimeMinutes,proto3" json:"max_overtime_minutes,omitempty"`
}

func (x *GameHistoryRefresher) Reset() {
	*x = GameHistoryRefresher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameHistoryRefresher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameHistoryRefresher) ProtoMessage() {}

func (x *GameHistoryRefresher) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameHistoryRefresher.ProtoReflect.Descriptor instead.
func (*GameHistoryRefresher) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{22}
}

func (x *GameHistoryRefresher) GetHistory() *macondo.GameHistory {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *GameHistoryRefresher) GetTimePlayer1() int32 {
	if x != nil {
		return x.TimePlayer1
	}
	return 0
}

func (x *GameHistoryRefresher) GetTimePlayer2() int32 {
	if x != nil {
		return x.TimePlayer2
	}
	return 0
}

func (x *GameHistoryRefresher) GetMaxOvertimeMinutes() int32 {
	if x != nil {
		return x.MaxOvertimeMinutes
	}
	return 0
}

// A NewGameEvent gets sent from the server to the involved clients when a new
// game is about to begin. It should follow a SoughtGameProcessEvent.
type NewGameEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	// These are the connection IDs of the requesting and accepting users.
	RequesterCid string `protobuf:"bytes,2,opt,name=requester_cid,json=requesterCid,proto3" json:"requester_cid,omitempty"`
	AccepterCid  string `protobuf:"bytes,3,opt,name=accepter_cid,json=accepterCid,proto3" json:"accepter_cid,omitempty"`
}

func (x *NewGameEvent) Reset() {
	*x = NewGameEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewGameEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewGameEvent) ProtoMessage() {}

func (x *NewGameEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewGameEvent.ProtoReflect.Descriptor instead.
func (*NewGameEvent) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{23}
}

func (x *NewGameEvent) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *NewGameEvent) GetRequesterCid() string {
	if x != nil {
		return x.RequesterCid
	}
	return ""
}

func (x *NewGameEvent) GetAccepterCid() string {
	if x != nil {
		return x.AccepterCid
	}
	return ""
}

type ErrorMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // Maybe codes or something else in the future.
}

func (x *ErrorMessage) Reset() {
	*x = ErrorMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorMessage) ProtoMessage() {}

func (x *ErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorMessage.ProtoReflect.Descriptor instead.
func (*ErrorMessage) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{24}
}

func (x *ErrorMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{25}
}

func (x *ServerMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// We encapsulate the game event here from the client's point of view. The
// server will validate that the event is permissible.
type ClientGameplayEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   ClientGameplayEvent_EventType `protobuf:"varint,1,opt,name=type,proto3,enum=liwords.ClientGameplayEvent_EventType" json:"type,omitempty"`
	GameId string                        `protobuf:"bytes,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	// position coordinates, like H8 or G10. Only matters for TILE_PLACEMENT.
	PositionCoords string `protobuf:"bytes,3,opt,name=position_coords,json=positionCoords,proto3" json:"position_coords,omitempty"`
	// tiles that are being played (or exchanged). The `.` character is used
	// for thru, and lowercase characters are used for blanks.
	Tiles string `protobuf:"bytes,4,opt,name=tiles,proto3" json:"tiles,omitempty"`
}

func (x *ClientGameplayEvent) Reset() {
	*x = ClientGameplayEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientGameplayEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientGameplayEvent) ProtoMessage() {}

func (x *ClientGameplayEvent) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientGameplayEvent.ProtoReflect.Descriptor instead.
func (*ClientGameplayEvent) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{26}
}

func (x *ClientGameplayEvent) GetType() ClientGameplayEvent_EventType {
	if x != nil {
		return x.Type
	}
	return ClientGameplayEvent_TILE_PLACEMENT
}

func (x *ClientGameplayEvent) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *ClientGameplayEvent) GetPositionCoords() string {
	if x != nil {
		return x.PositionCoords
	}
	return ""
}

func (x *ClientGameplayEvent) GetTiles() string {
	if x != nil {
		return x.Tiles
	}
	return ""
}

// This can be sent from the user to the tournament or vice-versa.
type ReadyForTournamentGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId string `protobuf:"bytes,1,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	Division     string `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Round        int32  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	PlayerId     string `protobuf:"bytes,4,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	GameIndex    int32  `protobuf:"varint,5,opt,name=game_index,json=gameIndex,proto3" json:"game_index,omitempty"` // within a matchplay type tournament where several
	// games share a round.
	Unready bool `protobuf:"varint,6,opt,name=unready,proto3" json:"unready,omitempty"` // if true, this is a NOT-ready message.
}

func (x *ReadyForTournamentGame) Reset() {
	*x = ReadyForTournamentGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadyForTournamentGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadyForTournamentGame) ProtoMessage() {}

func (x *ReadyForTournamentGame) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadyForTournamentGame.ProtoReflect.Descriptor instead.
func (*ReadyForTournamentGame) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{27}
}

func (x *ReadyForTournamentGame) GetTournamentId() string {
	if x != nil {
		return x.TournamentId
	}
	return ""
}

func (x *ReadyForTournamentGame) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *ReadyForTournamentGame) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *ReadyForTournamentGame) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *ReadyForTournamentGame) GetGameIndex() int32 {
	if x != nil {
		return x.GameIndex
	}
	return 0
}

func (x *ReadyForTournamentGame) GetUnready() bool {
	if x != nil {
		return x.Unready
	}
	return false
}

type TimedOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TimedOut) Reset() {
	*x = TimedOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimedOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimedOut) ProtoMessage() {}

func (x *TimedOut) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimedOut.ProtoReflect.Descriptor instead.
func (*TimedOut) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{28}
}

func (x *TimedOut) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *TimedOut) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// When a Receiver declines a Seeker:
type DeclineMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *DeclineMatchRequest) Reset() {
	*x = DeclineMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclineMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclineMatchRequest) ProtoMessage() {}

func (x *DeclineMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclineMatchRequest.ProtoReflect.Descriptor instead.
func (*DeclineMatchRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{29}
}

func (x *DeclineMatchRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type TournamentPersons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division string           `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Persons  map[string]int32 `protobuf:"bytes,3,rep,name=persons,proto3" json:"persons,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *TournamentPersons) Reset() {
	*x = TournamentPersons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentPersons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentPersons) ProtoMessage() {}

func (x *TournamentPersons) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentPersons.ProtoReflect.Descriptor instead.
func (*TournamentPersons) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{30}
}

func (x *TournamentPersons) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentPersons) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *TournamentPersons) GetPersons() map[string]int32 {
	if x != nil {
		return x.Persons
	}
	return nil
}

type RoundControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PairingMethod               PairingMethod `protobuf:"varint,1,opt,name=pairing_method,json=pairingMethod,proto3,enum=liwords.PairingMethod" json:"pairing_method,omitempty"`
	FirstMethod                 FirstMethod   `protobuf:"varint,2,opt,name=first_method,json=firstMethod,proto3,enum=liwords.FirstMethod" json:"first_method,omitempty"`
	GamesPerRound               int32         `protobuf:"varint,3,opt,name=games_per_round,json=gamesPerRound,proto3" json:"games_per_round,omitempty"`
	Round                       int32         `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty"`
	Factor                      int32         `protobuf:"varint,5,opt,name=factor,proto3" json:"factor,omitempty"`
	InitialFontes               int32         `protobuf:"varint,6,opt,name=initial_fontes,json=initialFontes,proto3" json:"initial_fontes,omitempty"`
	MaxRepeats                  int32         `protobuf:"varint,7,opt,name=max_repeats,json=maxRepeats,proto3" json:"max_repeats,omitempty"`
	AllowOverMaxRepeats         bool          `protobuf:"varint,8,opt,name=allow_over_max_repeats,json=allowOverMaxRepeats,proto3" json:"allow_over_max_repeats,omitempty"`
	RepeatRelativeWeight        int32         `protobuf:"varint,9,opt,name=repeat_relative_weight,json=repeatRelativeWeight,proto3" json:"repeat_relative_weight,omitempty"`
	WinDifferenceRelativeWeight int32         `protobuf:"varint,10,opt,name=win_difference_relative_weight,json=winDifferenceRelativeWeight,proto3" json:"win_difference_relative_weight,omitempty"`
}

func (x *RoundControl) Reset() {
	*x = RoundControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundControl) ProtoMessage() {}

func (x *RoundControl) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundControl.ProtoReflect.Descriptor instead.
func (*RoundControl) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{31}
}

func (x *RoundControl) GetPairingMethod() PairingMethod {
	if x != nil {
		return x.PairingMethod
	}
	return PairingMethod_RANDOM
}

func (x *RoundControl) GetFirstMethod() FirstMethod {
	if x != nil {
		return x.FirstMethod
	}
	return FirstMethod_MANUAL_FIRST
}

func (x *RoundControl) GetGamesPerRound() int32 {
	if x != nil {
		return x.GamesPerRound
	}
	return 0
}

func (x *RoundControl) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *RoundControl) GetFactor() int32 {
	if x != nil {
		return x.Factor
	}
	return 0
}

func (x *RoundControl) GetInitialFontes() int32 {
	if x != nil {
		return x.InitialFontes
	}
	return 0
}

func (x *RoundControl) GetMaxRepeats() int32 {
	if x != nil {
		return x.MaxRepeats
	}
	return 0
}

func (x *RoundControl) GetAllowOverMaxRepeats() bool {
	if x != nil {
		return x.AllowOverMaxRepeats
	}
	return false
}

func (x *RoundControl) GetRepeatRelativeWeight() int32 {
	if x != nil {
		return x.RepeatRelativeWeight
	}
	return 0
}

func (x *RoundControl) GetWinDifferenceRelativeWeight() int32 {
	if x != nil {
		return x.WinDifferenceRelativeWeight
	}
	return 0
}

type TournamentControls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division      string                 `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	GameRequest   *GameRequest           `protobuf:"bytes,3,opt,name=game_request,json=gameRequest,proto3" json:"game_request,omitempty"`
	RoundControls []*RoundControl        `protobuf:"bytes,4,rep,name=round_controls,json=roundControls,proto3" json:"round_controls,omitempty"`
	Type          int32                  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	AutoStart     bool                   `protobuf:"varint,7,opt,name=auto_start,json=autoStart,proto3" json:"auto_start,omitempty"`
}

func (x *TournamentControls) Reset() {
	*x = TournamentControls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentControls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentControls) ProtoMessage() {}

func (x *TournamentControls) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentControls.ProtoReflect.Descriptor instead.
func (*TournamentControls) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{32}
}

func (x *TournamentControls) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentControls) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *TournamentControls) GetGameRequest() *GameRequest {
	if x != nil {
		return x.GameRequest
	}
	return nil
}

func (x *TournamentControls) GetRoundControls() []*RoundControl {
	if x != nil {
		return x.RoundControls
	}
	return nil
}

func (x *TournamentControls) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TournamentControls) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TournamentControls) GetAutoStart() bool {
	if x != nil {
		return x.AutoStart
	}
	return false
}

type TournamentGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scores        []int32                `protobuf:"varint,1,rep,packed,name=scores,proto3" json:"scores,omitempty"`
	Results       []TournamentGameResult `protobuf:"varint,2,rep,packed,name=results,proto3,enum=liwords.TournamentGameResult" json:"results,omitempty"`
	GameEndReason GameEndReason          `protobuf:"varint,3,opt,name=game_end_reason,json=gameEndReason,proto3,enum=liwords.GameEndReason" json:"game_end_reason,omitempty"`
	Id            string                 `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TournamentGame) Reset() {
	*x = TournamentGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentGame) ProtoMessage() {}

func (x *TournamentGame) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentGame.ProtoReflect.Descriptor instead.
func (*TournamentGame) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{33}
}

func (x *TournamentGame) GetScores() []int32 {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *TournamentGame) GetResults() []TournamentGameResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TournamentGame) GetGameEndReason() GameEndReason {
	if x != nil {
		return x.GameEndReason
	}
	return GameEndReason_NONE
}

func (x *TournamentGame) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PlayerProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Removed bool  `protobuf:"varint,1,opt,name=removed,proto3" json:"removed,omitempty"`
	Rating  int32 `protobuf:"varint,2,opt,name=rating,proto3" json:"rating,omitempty"`
}

func (x *PlayerProperties) Reset() {
	*x = PlayerProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerProperties) ProtoMessage() {}

func (x *PlayerProperties) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerProperties.ProtoReflect.Descriptor instead.
func (*PlayerProperties) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{34}
}

func (x *PlayerProperties) GetRemoved() bool {
	if x != nil {
		return x.Removed
	}
	return false
}

func (x *PlayerProperties) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

type PlayerRoundInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players     []string               `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	Games       []*TournamentGame      `protobuf:"bytes,2,rep,name=games,proto3" json:"games,omitempty"` // can be a list, for elimination tourneys
	Outcomes    []TournamentGameResult `protobuf:"varint,3,rep,packed,name=outcomes,proto3,enum=liwords.TournamentGameResult" json:"outcomes,omitempty"`
	ReadyStates []string               `protobuf:"bytes,4,rep,name=ready_states,json=readyStates,proto3" json:"ready_states,omitempty"`
}

func (x *PlayerRoundInfo) Reset() {
	*x = PlayerRoundInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRoundInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRoundInfo) ProtoMessage() {}

func (x *PlayerRoundInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRoundInfo.ProtoReflect.Descriptor instead.
func (*PlayerRoundInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{35}
}

func (x *PlayerRoundInfo) GetPlayers() []string {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *PlayerRoundInfo) GetGames() []*TournamentGame {
	if x != nil {
		return x.Games
	}
	return nil
}

func (x *PlayerRoundInfo) GetOutcomes() []TournamentGameResult {
	if x != nil {
		return x.Outcomes
	}
	return nil
}

func (x *PlayerRoundInfo) GetReadyStates() []string {
	if x != nil {
		return x.ReadyStates
	}
	return nil
}

type PlayerStanding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player  string `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
	Wins    int32  `protobuf:"varint,2,opt,name=wins,proto3" json:"wins,omitempty"`
	Losses  int32  `protobuf:"varint,3,opt,name=losses,proto3" json:"losses,omitempty"`
	Draws   int32  `protobuf:"varint,4,opt,name=draws,proto3" json:"draws,omitempty"`
	Spread  int32  `protobuf:"varint,5,opt,name=spread,proto3" json:"spread,omitempty"`
	Removed bool   `protobuf:"varint,6,opt,name=removed,proto3" json:"removed,omitempty"`
}

func (x *PlayerStanding) Reset() {
	*x = PlayerStanding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStanding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStanding) ProtoMessage() {}

func (x *PlayerStanding) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStanding.ProtoReflect.Descriptor instead.
func (*PlayerStanding) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{36}
}

func (x *PlayerStanding) GetPlayer() string {
	if x != nil {
		return x.Player
	}
	return ""
}

func (x *PlayerStanding) GetWins() int32 {
	if x != nil {
		return x.Wins
	}
	return 0
}

func (x *PlayerStanding) GetLosses() int32 {
	if x != nil {
		return x.Losses
	}
	return 0
}

func (x *PlayerStanding) GetDraws() int32 {
	if x != nil {
		return x.Draws
	}
	return 0
}

func (x *PlayerStanding) GetSpread() int32 {
	if x != nil {
		return x.Spread
	}
	return 0
}

func (x *PlayerStanding) GetRemoved() bool {
	if x != nil {
		return x.Removed
	}
	return false
}

type RoundStandings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Standings []*PlayerStanding `protobuf:"bytes,1,rep,name=standings,proto3" json:"standings,omitempty"`
}

func (x *RoundStandings) Reset() {
	*x = RoundStandings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundStandings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundStandings) ProtoMessage() {}

func (x *RoundStandings) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundStandings.ProtoReflect.Descriptor instead.
func (*RoundStandings) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{37}
}

func (x *RoundStandings) GetStandings() []*PlayerStanding {
	if x != nil {
		return x.Standings
	}
	return nil
}

type ClassicDivision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matrix []*PlayerRoundInfo `protobuf:"bytes,1,rep,name=matrix,proto3" json:"matrix,omitempty"`
}

func (x *ClassicDivision) Reset() {
	*x = ClassicDivision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassicDivision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassicDivision) ProtoMessage() {}

func (x *ClassicDivision) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassicDivision.ProtoReflect.Descriptor instead.
func (*ClassicDivision) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{38}
}

func (x *ClassicDivision) GetMatrix() []*PlayerRoundInfo {
	if x != nil {
		return x.Matrix
	}
	return nil
}

type TournamentDivisionDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DivisionId string   `protobuf:"bytes,2,opt,name=division_id,json=divisionId,proto3" json:"division_id,omitempty"`
	Players    []string `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty"`
	// DEPRECIATED
	// TournamentControls controls = 4;
	// In the future we will add different
	// types of tournament divisions and only
	// one will be non nil
	Division []string `protobuf:"bytes,5,rep,name=division,proto3" json:"division,omitempty"`
	// DEPRECIATED
	PlayerIndexMap    map[string]int32            `protobuf:"bytes,6,rep,name=player_index_map,json=playerIndexMap,proto3" json:"player_index_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	PairingMap        map[string]*PlayerRoundInfo `protobuf:"bytes,7,rep,name=pairing_map,json=pairingMap,proto3" json:"pairing_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CurrentRound      int32                       `protobuf:"varint,8,opt,name=current_round,json=currentRound,proto3" json:"current_round,omitempty"`
	Standings         map[int32]*RoundStandings   `protobuf:"bytes,9,rep,name=standings,proto3" json:"standings,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PlayersProperties []*PlayerProperties         `protobuf:"bytes,10,rep,name=players_properties,json=playersProperties,proto3" json:"players_properties,omitempty"`
	Finished          bool                        `protobuf:"varint,11,opt,name=finished,proto3" json:"finished,omitempty"`
}

func (x *TournamentDivisionDataResponse) Reset() {
	*x = TournamentDivisionDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentDivisionDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentDivisionDataResponse) ProtoMessage() {}

func (x *TournamentDivisionDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentDivisionDataResponse.ProtoReflect.Descriptor instead.
func (*TournamentDivisionDataResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{39}
}

func (x *TournamentDivisionDataResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentDivisionDataResponse) GetDivisionId() string {
	if x != nil {
		return x.DivisionId
	}
	return ""
}

func (x *TournamentDivisionDataResponse) GetPlayers() []string {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *TournamentDivisionDataResponse) GetDivision() []string {
	if x != nil {
		return x.Division
	}
	return nil
}

func (x *TournamentDivisionDataResponse) GetPlayerIndexMap() map[string]int32 {
	if x != nil {
		return x.PlayerIndexMap
	}
	return nil
}

func (x *TournamentDivisionDataResponse) GetPairingMap() map[string]*PlayerRoundInfo {
	if x != nil {
		return x.PairingMap
	}
	return nil
}

func (x *TournamentDivisionDataResponse) GetCurrentRound() int32 {
	if x != nil {
		return x.CurrentRound
	}
	return 0
}

func (x *TournamentDivisionDataResponse) GetStandings() map[int32]*RoundStandings {
	if x != nil {
		return x.Standings
	}
	return nil
}

func (x *TournamentDivisionDataResponse) GetPlayersProperties() []*PlayerProperties {
	if x != nil {
		return x.PlayersProperties
	}
	return nil
}

func (x *TournamentDivisionDataResponse) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

type FullTournamentDivisions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Divisions map[string]*TournamentDivisionDataResponse `protobuf:"bytes,1,rep,name=divisions,proto3" json:"divisions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Started   bool                                       `protobuf:"varint,2,opt,name=started,proto3" json:"started,omitempty"`
}

func (x *FullTournamentDivisions) Reset() {
	*x = FullTournamentDivisions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullTournamentDivisions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullTournamentDivisions) ProtoMessage() {}

func (x *FullTournamentDivisions) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullTournamentDivisions.ProtoReflect.Descriptor instead.
func (*FullTournamentDivisions) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{40}
}

func (x *FullTournamentDivisions) GetDivisions() map[string]*TournamentDivisionDataResponse {
	if x != nil {
		return x.Divisions
	}
	return nil
}

func (x *FullTournamentDivisions) GetStarted() bool {
	if x != nil {
		return x.Started
	}
	return false
}

type TournamentDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description       string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ExecutiveDirector string                 `protobuf:"bytes,4,opt,name=executive_director,json=executiveDirector,proto3" json:"executive_director,omitempty"`
	Directors         *TournamentPersons     `protobuf:"bytes,5,opt,name=directors,proto3" json:"directors,omitempty"`
	IsStarted         bool                   `protobuf:"varint,6,opt,name=is_started,json=isStarted,proto3" json:"is_started,omitempty"`
	StartTime         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *TournamentDataResponse) Reset() {
	*x = TournamentDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentDataResponse) ProtoMessage() {}

func (x *TournamentDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentDataResponse.ProtoReflect.Descriptor instead.
func (*TournamentDataResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{41}
}

func (x *TournamentDataResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentDataResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TournamentDataResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TournamentDataResponse) GetExecutiveDirector() string {
	if x != nil {
		return x.ExecutiveDirector
	}
	return ""
}

func (x *TournamentDataResponse) GetDirectors() *TournamentPersons {
	if x != nil {
		return x.Directors
	}
	return nil
}

func (x *TournamentDataResponse) GetIsStarted() bool {
	if x != nil {
		return x.IsStarted
	}
	return false
}

func (x *TournamentDataResponse) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

type TournamentDivisionDeletedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Division string `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
}

func (x *TournamentDivisionDeletedResponse) Reset() {
	*x = TournamentDivisionDeletedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentDivisionDeletedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentDivisionDeletedResponse) ProtoMessage() {}

func (x *TournamentDivisionDeletedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentDivisionDeletedResponse.ProtoReflect.Descriptor instead.
func (*TournamentDivisionDeletedResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{42}
}

func (x *TournamentDivisionDeletedResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TournamentDivisionDeletedResponse) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

// When we go to a new path in our SPA, we send a JoinPath. When we leave the
// path, we send an Unjoin realm.
type JoinPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *JoinPath) Reset() {
	*x = JoinPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinPath) ProtoMessage() {}

func (x *JoinPath) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinPath.ProtoReflect.Descriptor instead.
func (*JoinPath) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{43}
}

func (x *JoinPath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type UnjoinRealm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnjoinRealm) Reset() {
	*x = UnjoinRealm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnjoinRealm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnjoinRealm) ProtoMessage() {}

func (x *UnjoinRealm) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnjoinRealm.ProtoReflect.Descriptor instead.
func (*UnjoinRealm) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{44}
}

type TournamentGameEndedEvent_Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string               `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Score    int32                `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	Result   TournamentGameResult `protobuf:"varint,3,opt,name=result,proto3,enum=liwords.TournamentGameResult" json:"result,omitempty"`
}

func (x *TournamentGameEndedEvent_Player) Reset() {
	*x = TournamentGameEndedEvent_Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_realtime_realtime_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentGameEndedEvent_Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentGameEndedEvent_Player) ProtoMessage() {}

func (x *TournamentGameEndedEvent_Player) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_realtime_realtime_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentGameEndedEvent_Player.ProtoReflect.Descriptor instead.
func (*TournamentGameEndedEvent_Player) Descriptor() ([]byte, []int) {
	return file_api_proto_realtime_realtime_proto_rawDescGZIP(), []int{19, 0}
}

func (x *TournamentGameEndedEvent_Player) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TournamentGameEndedEvent_Player) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *TournamentGameEndedEvent_Player) GetResult() TournamentGameResult {
	if x != nil {
		return x.Result
	}
	return TournamentGameResult_NO_RESULT
}

var File_api_proto_realtime_realtime_proto protoreflect.FileDescriptor

var file_api_proto_realtime_realtime_proto_rawDesc = []byte{
	0x0a, 0x21, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x2f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x1a, 0x27, 0x6d, 0x61,
	0x63, 0x6f, 0x6e, 0x64, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x6d, 0x61, 0x63, 0x6f, 0x6e, 0x64, 0x6f, 0x2f, 0x6d, 0x61, 0x63, 0x6f, 0x6e, 0x64, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x01, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x18, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xfa, 0x03,
	0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x65, 0x78, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x63, 0x6f, 0x6e,
	0x64, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x2e, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x34, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x76, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x73, 0x42, 0x6f, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x09, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65,
	0x76, 0x61, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x1e, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x27, 0x0a, 0x0e, 0x4c, 0x61, 0x67, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x61, 0x67, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x67, 0x4d, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x0b, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x40, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x30, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x22, 0x44, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x65, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x95, 0x02, 0x0a, 0x0c,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0c,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x39, 0x0a,
	0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x79, 0x46, 0x6f, 0x72, 0x47,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x16,
	0x53, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x18, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x40, 0x0a, 0x0c, 0x53, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x65,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x22, 0x42, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x61, 0x63, 0x6f, 0x6e, 0x64, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x52, 0x61, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x63, 0x6f, 0x6e, 0x64, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e,
	0x67, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x1a, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x12,
	0x3d, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x63, 0x6f, 0x6e, 0x64,
	0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x22, 0xdd,
	0x04, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x45, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x48,
	0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x77,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6e, 0x65,
	0x77, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6c,
	0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x73, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x69, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x69, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x69, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x63, 0x6f, 0x6e, 0x64, 0x6f, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d,
	0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a,
	0x11, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86,
	0x03, 0x0a, 0x18, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6c,
	0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x1a, 0x71, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x16, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x22, 0x3d, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22,
	0xbe, 0x01, 0x0a, 0x14, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x63, 0x6f,
	0x6e, 0x64, 0x6f, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x12, 0x30,
	0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61,
	0x78, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x22, 0x6f, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x43, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x72, 0x43, 0x69,
	0x64, 0x22, 0x28, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x29, 0x0a, 0x0d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3a,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6c,
	0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x6c,
	0x65, 0x73, 0x22, 0x57, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x0e, 0x54, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x45, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x04, 0x22, 0xc5, 0x01, 0x0a, 0x16,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x46, 0x6f, 0x72, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x22, 0x3c, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x34, 0x0a, 0x13, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x11, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x07, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x69, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x03, 0x0a, 0x0c, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x3d, 0x0a, 0x0e, 0x70, 0x61, 0x69,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x50, 0x61, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x69, 0x72, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x12,
	0x33, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x77, 0x69,
	0x6e, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1b, 0x77, 0x69, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0xa5, 0x02, 0x0a, 0x12, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b,
	0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0e, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75,
	0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x0e, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x67, 0x61,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x44, 0x0a, 0x10, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x22, 0xb8, 0x01, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x2d, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x39,
	0x0a, 0x08, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x08, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a,
	0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x6f, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x72, 0x61, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x64, 0x72, 0x61, 0x77, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x70, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x70, 0x72, 0x65, 0x61,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x22, 0x47, 0x0a, 0x0e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0x43, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x44,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x61, 0x74, 0x72, 0x69,
	0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x22, 0x9c, 0x06, 0x0a, 0x1e, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x12, 0x58, 0x0a, 0x0b, 0x70, 0x61,
	0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x69, 0x72, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x54, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6c,
	0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x48, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x1a, 0x41, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x0f, 0x50, 0x61, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c,
	0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x55, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe9, 0x01, 0x0a, 0x17, 0x46, 0x75, 0x6c,
	0x6c, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x09, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x1a, 0x65, 0x0a,
	0x0e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xa1, 0x02, 0x0a, 0x16, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x69, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x73, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x21, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x08, 0x4a, 0x6f, 0x69,
	0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x0d, 0x0a, 0x0b, 0x55, 0x6e, 0x6a,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x2a, 0x2d, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x44, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x2a, 0x23, 0x0a, 0x0a, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x53, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x2a, 0xa4, 0x06, 0x0a,
	0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x45, 0x45, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x01, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x4f, 0x55, 0x47, 0x48, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x50,
	0x4c, 0x41, 0x59, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45,
	0x4e, 0x44, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x46,
	0x52, 0x45, 0x53, 0x48, 0x45, 0x52, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x4e,
	0x45, 0x57, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x08, 0x12,
	0x21, 0x0a, 0x1d, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45,
	0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x45, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x53, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x4e, 0x47, 0x4f, 0x49, 0x4e, 0x47,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d,
	0x4f, 0x4e, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x10, 0x0e, 0x12,
	0x1d, 0x0a, 0x19, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x55,
	0x52, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x0f, 0x12, 0x1c,
	0x0a, 0x18, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x11, 0x12,
	0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x53, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x13, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x14,
	0x12, 0x11, 0x0a, 0x0d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43,
	0x45, 0x10, 0x16, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x53,
	0x45, 0x4e, 0x43, 0x45, 0x53, 0x10, 0x17, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x18, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x19, 0x12,
	0x13, 0x0a, 0x0f, 0x4c, 0x41, 0x47, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x1a, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x10, 0x1b, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x1c, 0x12, 0x13, 0x0a,
	0x0f, 0x52, 0x45, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x1d, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x1e, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x1f, 0x12, 0x25, 0x0a, 0x21,
	0x54, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f,
	0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x20, 0x2a, 0x9c, 0x01, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x53, 0x45,
	0x43, 0x55, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x45, 0x53, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52,
	0x49, 0x50, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x06,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12,
	0x11, 0x0a, 0x0d, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x46, 0x45, 0x49, 0x54,
	0x10, 0x08, 0x2a, 0x7e, 0x0a, 0x14, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x49, 0x4e,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x52, 0x41, 0x57, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x59, 0x45, 0x10, 0x04, 0x12,
	0x0f, 0x0a, 0x0b, 0x46, 0x4f, 0x52, 0x46, 0x45, 0x49, 0x54, 0x5f, 0x57, 0x49, 0x4e, 0x10, 0x05,
	0x12, 0x10, 0x0a, 0x0c, 0x46, 0x4f, 0x52, 0x46, 0x45, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x53, 0x53,
	0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x07, 0x2a, 0x99, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x42, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x48, 0x45,
	0x5f, 0x48, 0x49, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4c, 0x49, 0x4d, 0x49,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x43, 0x54,
	0x4f, 0x52, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f,
	0x46, 0x4f, 0x4e, 0x54, 0x45, 0x53, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x57, 0x49, 0x53,
	0x53, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x50, 0x41, 0x49, 0x52,
	0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x08, 0x2a, 0x46,
	0x0a, 0x0b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a,
	0x0c, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x46,
	0x49, 0x52, 0x53, 0x54, 0x10, 0x02, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x6f, 0x31, 0x34, 0x2f, 0x6c, 0x69,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_realtime_realtime_proto_rawDescOnce sync.Once
	file_api_proto_realtime_realtime_proto_rawDescData = file_api_proto_realtime_realtime_proto_rawDesc
)

func file_api_proto_realtime_realtime_proto_rawDescGZIP() []byte {
	file_api_proto_realtime_realtime_proto_rawDescOnce.Do(func() {
		file_api_proto_realtime_realtime_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_realtime_realtime_proto_rawDescData)
	})
	return file_api_proto_realtime_realtime_proto_rawDescData
}

var file_api_proto_realtime_realtime_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_api_proto_realtime_realtime_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_api_proto_realtime_realtime_proto_goTypes = []interface{}{
	(GameMode)(0),                             // 0: liwords.GameMode
	(RatingMode)(0),                           // 1: liwords.RatingMode
	(MessageType)(0),                          // 2: liwords.MessageType
	(GameEndReason)(0),                        // 3: liwords.GameEndReason
	(TournamentGameResult)(0),                 // 4: liwords.TournamentGameResult
	(PairingMethod)(0),                        // 5: liwords.PairingMethod
	(FirstMethod)(0),                          // 6: liwords.FirstMethod
	(ClientGameplayEvent_EventType)(0),        // 7: liwords.ClientGameplayEvent.EventType
	(*GameRules)(nil),                         // 8: liwords.GameRules
	(*GameRequest)(nil),                       // 9: liwords.GameRequest
	(*MatchUser)(nil),                         // 10: liwords.MatchUser
	(*GameDeletion)(nil),                      // 11: liwords.GameDeletion
	(*LagMeasurement)(nil),                    // 12: liwords.LagMeasurement
	(*ChatMessage)(nil),                       // 13: liwords.ChatMessage
	(*ChatMessages)(nil),                      // 14: liwords.ChatMessages
	(*UserPresence)(nil),                      // 15: liwords.UserPresence
	(*UserPresences)(nil),                     // 16: liwords.UserPresences
	(*SeekRequest)(nil),                       // 17: liwords.SeekRequest
	(*MatchRequest)(nil),                      // 18: liwords.MatchRequest
	(*ReadyForGame)(nil),                      // 19: liwords.ReadyForGame
	(*SoughtGameProcessEvent)(nil),            // 20: liwords.SoughtGameProcessEvent
	(*MatchRequestCancellation)(nil),          // 21: liwords.MatchRequestCancellation
	(*SeekRequests)(nil),                      // 22: liwords.SeekRequests
	(*MatchRequests)(nil),                     // 23: liwords.MatchRequests
	(*ServerGameplayEvent)(nil),               // 24: liwords.ServerGameplayEvent
	(*ServerChallengeResultEvent)(nil),        // 25: liwords.ServerChallengeResultEvent
	(*GameEndedEvent)(nil),                    // 26: liwords.GameEndedEvent
	(*TournamentGameEndedEvent)(nil),          // 27: liwords.TournamentGameEndedEvent
	(*TournamentRoundStarted)(nil),            // 28: liwords.TournamentRoundStarted
	(*RematchStartedEvent)(nil),               // 29: liwords.RematchStartedEvent
	(*GameHistoryRefresher)(nil),              // 30: liwords.GameHistoryRefresher
	(*NewGameEvent)(nil),                      // 31: liwords.NewGameEvent
	(*ErrorMessage)(nil),                      // 32: liwords.ErrorMessage
	(*ServerMessage)(nil),                     // 33: liwords.ServerMessage
	(*ClientGameplayEvent)(nil),               // 34: liwords.ClientGameplayEvent
	(*ReadyForTournamentGame)(nil),            // 35: liwords.ReadyForTournamentGame
	(*TimedOut)(nil),                          // 36: liwords.TimedOut
	(*DeclineMatchRequest)(nil),               // 37: liwords.DeclineMatchRequest
	(*TournamentPersons)(nil),                 // 38: liwords.TournamentPersons
	(*RoundControl)(nil),                      // 39: liwords.RoundControl
	(*TournamentControls)(nil),                // 40: liwords.TournamentControls
	(*TournamentGame)(nil),                    // 41: liwords.TournamentGame
	(*PlayerProperties)(nil),                  // 42: liwords.PlayerProperties
	(*PlayerRoundInfo)(nil),                   // 43: liwords.PlayerRoundInfo
	(*PlayerStanding)(nil),                    // 44: liwords.PlayerStanding
	(*RoundStandings)(nil),                    // 45: liwords.RoundStandings
	(*ClassicDivision)(nil),                   // 46: liwords.ClassicDivision
	(*TournamentDivisionDataResponse)(nil),    // 47: liwords.TournamentDivisionDataResponse
	(*FullTournamentDivisions)(nil),           // 48: liwords.FullTournamentDivisions
	(*TournamentDataResponse)(nil),            // 49: liwords.TournamentDataResponse
	(*TournamentDivisionDeletedResponse)(nil), // 50: liwords.TournamentDivisionDeletedResponse
	(*JoinPath)(nil),                          // 51: liwords.JoinPath
	(*UnjoinRealm)(nil),                       // 52: liwords.UnjoinRealm
	nil,                                       // 53: liwords.GameEndedEvent.ScoresEntry
	nil,                                       // 54: liwords.GameEndedEvent.NewRatingsEntry
	nil,                                       // 55: liwords.GameEndedEvent.RatingDeltasEntry
	(*TournamentGameEndedEvent_Player)(nil),   // 56: liwords.TournamentGameEndedEvent.Player
	nil,                                       // 57: liwords.TournamentPersons.PersonsEntry
	nil,                                       // 58: liwords.TournamentDivisionDataResponse.PlayerIndexMapEntry
	nil,                                       // 59: liwords.TournamentDivisionDataResponse.PairingMapEntry
	nil,                                       // 60: liwords.TournamentDivisionDataResponse.StandingsEntry
	nil,                                       // 61: liwords.FullTournamentDivisions.DivisionsEntry
	(macondo.ChallengeRule)(0),                // 62: macondo.ChallengeRule
	(*macondo.GameEvent)(nil),                 // 63: macondo.GameEvent
	(macondo.PlayState)(0),                    // 64: macondo.PlayState
	(*macondo.GameHistory)(nil),               // 65: macondo.GameHistory
	(*timestamppb.Timestamp)(nil),             // 66: google.protobuf.Timestamp
}
var file_api_proto_realtime_realtime_proto_depIdxs = []int32{
	8,  // 0: liwords.GameRequest.rules:type_name -> liwords.GameRules
	62, // 1: liwords.GameRequest.challenge_rule:type_name -> macondo.ChallengeRule
	0,  // 2: liwords.GameRequest.game_mode:type_name -> liwords.GameMode
	1,  // 3: liwords.GameRequest.rating_mode:type_name -> liwords.RatingMode
	13, // 4: liwords.ChatMessages.messages:type_name -> liwords.ChatMessage
	15, // 5: liwords.UserPresences.presences:type_name -> liwords.UserPresence
	9,  // 6: liwords.SeekRequest.game_request:type_name -> liwords.GameRequest
	10, // 7: liwords.SeekRequest.user:type_name -> liwords.MatchUser
	9,  // 8: liwords.MatchRequest.game_request:type_name -> liwords.GameRequest
	10, // 9: liwords.MatchRequest.user:type_name -> liwords.MatchUser
	10, // 10: liwords.MatchRequest.receiving_user:type_name -> liwords.MatchUser
	17, // 11: liwords.SeekRequests.requests:type_name -> liwords.SeekRequest
	18, // 12: liwords.MatchRequests.requests:type_name -> liwords.MatchRequest
	63, // 13: liwords.ServerGameplayEvent.event:type_name -> macondo.GameEvent
	64, // 14: liwords.ServerGameplayEvent.playing:type_name -> macondo.PlayState
	62, // 15: liwords.ServerChallengeResultEvent.challenge_rule:type_name -> macondo.ChallengeRule
	53, // 16: liwords.GameEndedEvent.scores:type_name -> liwords.GameEndedEvent.ScoresEntry
	54, // 17: liwords.GameEndedEvent.new_ratings:type_name -> liwords.GameEndedEvent.NewRatingsEntry
	3,  // 18: liwords.GameEndedEvent.end_reason:type_name -> liwords.GameEndReason
	55, // 19: liwords.GameEndedEvent.rating_deltas:type_name -> liwords.GameEndedEvent.RatingDeltasEntry
	65, // 20: liwords.GameEndedEvent.history:type_name -> macondo.GameHistory
	56, // 21: liwords.TournamentGameEndedEvent.players:type_name -> liwords.TournamentGameEndedEvent.Player
	3,  // 22: liwords.TournamentGameEndedEvent.end_reason:type_name -> liwords.GameEndReason
	66, // 23: liwords.TournamentRoundStarted.deadline:type_name -> google.protobuf.Timestamp
	65, // 24: liwords.GameHistoryRefresher.history:type_name -> macondo.GameHistory
	7,  // 25: liwords.ClientGameplayEvent.type:type_name -> liwords.ClientGameplayEvent.EventType
	57, // 26: liwords.TournamentPersons.persons:type_name -> liwords.TournamentPersons.PersonsEntry
	5,  // 27: liwords.RoundControl.pairing_method:type_name -> liwords.PairingMethod
	6,  // 28: liwords.RoundControl.first_method:type_name -> liwords.FirstMethod
	9,  // 29: liwords.TournamentControls.game_request:type_name -> liwords.GameRequest
	39, // 30: liwords.TournamentControls.round_controls:type_name -> liwords.RoundControl
	66, // 31: liwords.TournamentControls.start_time:type_name -> google.protobuf.Timestamp
	4,  // 32: liwords.TournamentGame.results:type_name -> liwords.TournamentGameResult
	3,  // 33: liwords.TournamentGame.game_end_reason:type_name -> liwords.GameEndReason
	41, // 34: liwords.PlayerRoundInfo.games:type_name -> liwords.TournamentGame
	4,  // 35: liwords.PlayerRoundInfo.outcomes:type_name -> liwords.TournamentGameResult
	44, // 36: liwords.RoundStandings.standings:type_name -> liwords.PlayerStanding
	43, // 37: liwords.ClassicDivision.matrix:type_name -> liwords.PlayerRoundInfo
	58, // 38: liwords.TournamentDivisionDataResponse.player_index_map:type_name -> liwords.TournamentDivisionDataResponse.PlayerIndexMapEntry
	59, // 39: liwords.TournamentDivisionDataResponse.pairing_map:type_name -> liwords.TournamentDivisionDataResponse.PairingMapEntry
	60, // 40: liwords.TournamentDivisionDataResponse.standings:type_name -> liwords.TournamentDivisionDataResponse.StandingsEntry
	42, // 41: liwords.TournamentDivisionDataResponse.players_properties:type_name -> liwords.PlayerProperties
	61, // 42: liwords.FullTournamentDivisions.divisions:type_name -> liwords.FullTournamentDivisions.DivisionsEntry
	38, // 43: liwords.TournamentDataResponse.directors:type_name -> liwords.TournamentPersons
	66, // 44: liwords.TournamentDataResponse.start_time:type_name -> google.protobuf.Timestamp
	4,  // 45: liwords.TournamentGameEndedEvent.Player.result:type_name -> liwords.TournamentGameResult
	43, // 46: liwords.TournamentDivisionDataResponse.PairingMapEntry.value:type_name -> liwords.PlayerRoundInfo
	45, // 47: liwords.TournamentDivisionDataResponse.StandingsEntry.value:type_name -> liwords.RoundStandings
	47, // 48: liwords.FullTournamentDivisions.DivisionsEntry.value:type_name -> liwords.TournamentDivisionDataResponse
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_api_proto_realtime_realtime_proto_init() }
func file_api_proto_realtime_realtime_proto_init() {
	if File_api_proto_realtime_realtime_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_proto_realtime_realtime_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameDeletion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LagMeasurement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPresence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPresences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeekRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadyForGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoughtGameProcessEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchRequestCancellation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeekRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerGameplayEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerChallengeResultEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEndedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentGameEndedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentRoundStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RematchStartedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameHistoryRefresher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewGameEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientGameplayEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadyForTournamentGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimedOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclineMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentPersons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentControls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerRoundInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerStanding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundStandings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassicDivision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentDivisionDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullTournamentDivisions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentDivisionDeletedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnjoinRealm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_realtime_realtime_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentGameEndedEvent_Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_realtime_realtime_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_proto_realtime_realtime_proto_goTypes,
		DependencyIndexes: file_api_proto_realtime_realtime_proto_depIdxs,
		EnumInfos:         file_api_proto_realtime_realtime_proto_enumTypes,
		MessageInfos:      file_api_proto_realtime_realtime_proto_msgTypes,
	}.Build()
	File_api_proto_realtime_realtime_proto = out.File
	file_api_proto_realtime_realtime_proto_rawDesc = nil
	file_api_proto_realtime_realtime_proto_goTypes = nil
	file_api_proto_realtime_realtime_proto_depIdxs = nil
}
