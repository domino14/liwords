syntax = "proto3";
package liwords;
option go_package = "github.com/domino14/liwords/rpc/api/proto/realtime";

// realtime contains the data structures and services needed for the actual
// gameplay. Since gameplay is intended to happen over a full-duplex connection,
// we will not be auto-generating service code; it is here for documentation
// purposes.

import "macondo/api/proto/macondo/macondo.proto";
import "google/protobuf/timestamp.proto";

// A GameRules is just the name of a board layout + the name of a letter
// distribution. These must exist in a database or file somewhere.
message GameRules {
  string board_layout_name = 1;
  string letter_distribution_name = 2;
  // If blank, variant is classic, otherwise it could be some other game
  // (a is worth 100, dogworms, etc.)
  string variant_name = 3;
}

enum GameMode {
  REAL_TIME = 0;
  CORRESPONDENCE = 1;
}

enum RatingMode {
  RATED = 0;
  CASUAL = 1;
}

enum ChildStatus {
  CHILD = 0;
  NOT_CHILD = 1;
  UNKNOWN = 2;
}

// Game initialization
// Both SeekRequest and MatchRequest encapsulate a more general GameRequest
// object Both these types of requests can be sent from client to server or
// vice-versa.

message GameRequest {
  string lexicon = 1;
  GameRules rules = 2;
  int32 initial_time_seconds = 3;
  int32 increment_seconds = 4;
  macondo.ChallengeRule challenge_rule = 5;
  GameMode game_mode = 6;
  RatingMode rating_mode = 7;
  string request_id = 8;
  int32 max_overtime_minutes = 9;
  bool player_vs_bot = 10;
  string original_request_id = 11;
}

// A MatchUser requests or receives a match via a seek or a match request.
message MatchUser {
  // user_id is the database, or anonymous, ID of the user.
  string user_id = 1;
  // relevant_rating is the rating of the user, for the relevant seek mode.
  string relevant_rating = 2;
  // if is_anonymous, backend won't bother to look up the user in the DB.
  bool is_anonymous = 3;
  // display_name is the display username of the user (could be real name too)
  string display_name = 4;
}

// Message types

// In order to make socket messages as small and simple as possible,
// we should include the message type with the socket message.
// Whenever we add a new client <-> server socket message type,
// add it to this list.
enum MessageType {
  SEEK_REQUEST = 0;
  MATCH_REQUEST = 1;
  SOUGHT_GAME_PROCESS_EVENT = 2;
  CLIENT_GAMEPLAY_EVENT = 3;
  SERVER_GAMEPLAY_EVENT = 4;
  GAME_ENDED_EVENT = 5;
  GAME_HISTORY_REFRESHER = 6;
  ERROR_MESSAGE = 7;
  NEW_GAME_EVENT = 8;
  SERVER_CHALLENGE_RESULT_EVENT = 9;
  SEEK_REQUESTS = 10;
  MATCH_REQUEST_CANCELLATION = 11;
  ONGOING_GAME_EVENT = 12;
  TIMED_OUT = 13;
  ONGOING_GAMES = 14;
  READY_FOR_TOURNAMENT_GAME = 15;
  TOURNAMENT_ROUND_STARTED = 16;
  GAME_DELETION = 17;
  MATCH_REQUESTS = 18;
  DECLINE_MATCH_REQUEST = 19;
  CHAT_MESSAGE = 20;
  CHAT_MESSAGE_DELETED = 21;
  USER_PRESENCE = 22;
  USER_PRESENCES = 23;
  SERVER_MESSAGE = 24;
  READY_FOR_GAME = 25;
  LAG_MEASUREMENT = 26;
  TOURNAMENT_GAME_ENDED_EVENT = 27;
  TOURNAMENT_MESSAGE = 28; // used for TournamentDataResponse (metadata)
  REMATCH_STARTED = 29;
  TOURNAMENT_DIVISION_MESSAGE = 30;
  TOURNAMENT_DIVISION_DELETED_MESSAGE = 31;
  TOURNAMENT_FULL_DIVISIONS_MESSAGE = 32;
  TOURNAMENT_DIVISION_ROUND_CONTROLS_MESSAGE = 34;
  TOURNAMENT_DIVISION_PAIRINGS_MESSAGE = 35;
  TOURNAMENT_DIVISION_CONTROLS_MESSAGE = 36;
  TOURNAMENT_DIVISION_PLAYER_CHANGE_MESSAGE = 37;
  TOURNAMENT_FINISHED_MESSAGE = 38;
  TOURNAMENT_DIVISION_PAIRINGS_DELETED_MESSAGE = 39;
  PRESENCE_ENTRY = 40;
  ACTIVE_GAME_ENTRY = 41;
  GAME_META_EVENT = 42;

  // Add more events here. The total number of events should fit in a byte.
  // We should definitely not be using anywhere close to 255 events, and
  // in order to enforce that I'll be forcing the event type header to just be
  // a byte long.
}

message GameDeletion { string id = 1; }

message ActiveGamePlayer {
  string username = 1;
  string user_id = 2;
}

message ActiveGameEntry {
  string id = 1;
  repeated ActiveGamePlayer player = 2;
  int64 ttl = 3; // time to live, in seconds
}

message LagMeasurement { int32 lag_ms = 1; }

// Bi-directional messages

message ChatMessage {
  string username = 1;
  string channel = 2;
  string message = 3;
  // timestamp is in milliseconds!
  int64 timestamp = 4;
  string user_id = 5;
  string id = 6;
  // these are only loaded by specific endpoints.
  string country_code = 7;
  string avatar_url = 8;
}

message ChatMessages { repeated ChatMessage messages = 1; }

message UserPresence {
  string username = 1;
  string user_id = 2;
  string channel = 3;
  bool is_anonymous = 4;
  bool deleting = 5;
}

message UserPresences { repeated UserPresence presences = 1; }

// Only authenticated connections.
message PresenceEntry {
  string username = 1;
  string user_id = 2;
  repeated string channel = 3;
}

message SeekRequest {
  GameRequest game_request = 1;
  MatchUser user = 2;
  int32 minimum_rating = 3;
  int32 maximum_rating = 4;
  // connection_id is the websocket ID via which this game was requested.
  string connection_id = 5;
}

message MatchRequest {
  GameRequest game_request = 1;
  MatchUser user = 2;
  MatchUser receiving_user = 3;
  // rematch_for is the game ID that this Match Request is a rematch for (empty
  // if it isn't a rematch)
  string rematch_for = 4;
  // connection_id is the websocket ID via which this game was requested.
  string connection_id = 5;
  // If this match request is part of a tournament, it is treated in a special
  // way. We are moving towards server-only matching during tournaments,
  // so the following will only be used in "clubhouse mode" / more free-form
  // clubs.
  string tournament_id = 6;
}

message ReadyForGame { string game_id = 1; }

// A SoughtGameProcessEvent gets sent when a match request (or seek request)
// get accepted (from client to server), or canceled -- when sent from server to
// client.
message SoughtGameProcessEvent { string request_id = 1; }

// Server to client messages:
// When a Seeker cancels their outgoing match request:
message MatchRequestCancellation { string request_id = 1; }

// SeekRequests sends all open seek requests.
message SeekRequests { repeated SeekRequest requests = 1; }
message MatchRequests { repeated MatchRequest requests = 1; }

// The server will send back a ServerGameplayEvent to a ClientGameplayEvent.
// The server will also send these asynchronously for opponent gameplay
// events.
message ServerGameplayEvent {
  macondo.GameEvent event = 1;
  string game_id = 2;
  string new_rack = 3;
  int32 time_remaining = 4;
  macondo.PlayState playing = 5;
  string user_id = 6; // the event has the nickname, but not the userid.
}

// ServerGameplayEvents is a list of consecutive events. Sometimes we send
// more than one event and don't want to send them separately.
// message ServerGameplayEvents { repeated ServerGameplayEvent events = 1; }

// The server will send back a challenge result event only in the case of
// a challenge. In all other cases, the server will send back a
// ServerGameplayEvent, and the front-end can
// A ServerChallengeResultEvent is sent back along with a GameHistoryRefresher
// when there is a challenge, instead of trying to reconstruct and send the
// right incremental events. The reason is that the logic is complex and
// has many special cases, and is already fully implemented in Macondo.
// We don't wish to re-implement it both in this repo's backend and frontend.
message ServerChallengeResultEvent {
  bool valid = 1;
  string challenger = 2;
  macondo.ChallengeRule challenge_rule = 3;
  string returned_tiles = 4;
}

// GameEndedEvent is always sent from the server to both clients.
message GameEndedEvent {
  map<string, int32> scores = 1;
  map<string, int32> new_ratings = 2;
  GameEndReason end_reason = 3;
  // The winner is not always the highest scoring player; one player can
  // time out. The end_reason should make it clear what happened.
  string winner = 4;
  string loser = 5;
  // If it was a tie, the winner and loser above can be interchanged.
  bool tie = 6;
  // Time that the game ended
  int64 time = 7;

  map<string, int32> rating_deltas = 8;
  // Send the full game history again. This will have rack information in it.
  macondo.GameHistory history = 9;
}

// GameMetaEvent defines how we serialize meta events to the database.
message GameMetaEvent {
  enum EventType {
    // These are "original events"
    REQUEST_ABORT = 0;
    // Adjudication is just seen as a "nudge" on the front end.
    REQUEST_ADJUDICATION = 1;
    REQUEST_UNDO = 2;
    REQUEST_ADJOURN = 3; // Are we going to implement this someday?

    // And these are responses:
    // A user can accept an abort, or the client will auto-accept when time
    // expires:
    ABORT_ACCEPTED = 4;
    ABORT_DENIED = 5;
    // A user would not accept an adjudication. The client auto-accepts this
    // when time expires
    ADJUDICATION_ACCEPTED = 6;
    // An adjudication is denied when the receiver responds positively to a
    // nudge.
    ADJUDICATION_DENIED = 7;
    UNDO_ACCEPTED = 8;
    UNDO_DENIED = 9;

    // More:
    ADD_TIME = 10; // add X seconds at a time (30?) to opponent's clock

    // Some meta events have a timer associated with them. Send this with the
    // original event id after time has expired.
    TIMER_EXPIRED = 11;
  }
  string orig_event_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  EventType type = 3;
  string player_id = 4; // the player that performed the event.
  string game_id = 5;
  int32 expiry = 6; // how long should this event remain active, in milliseconds?
  // 4M seconds should be enough for an event of this type.
}

// TournamentGameEndedEvent gets sent to a tournament channel when a game is
// over. This is a legacy way of showing tournament results right in the
// tournament lobby in realtime. New tournaments will use full tournament
// messages (specifically, TournamentDivisionDataResponse et al).
// This event is also used in the tournament_service's RecentGamesResponse,
// which can be used to fetch information for the last games played in
// a tournament.
message TournamentGameEndedEvent {

  message Player {
    string username = 1;
    int32 score = 2;
    TournamentGameResult result = 3;
  }

  string game_id = 1;
  repeated Player players = 2;
  GameEndReason end_reason = 3;
  // Time that the game ended
  int64 time = 4;
  int32 round = 5;
  string division = 6;
  int32 game_index = 7;
}

// This message makes the "Status Bar" show up and also tells the players
// that the backend is now accepting "ready" messages for this round.
message TournamentRoundStarted {
  string tournament_id = 1;
  string division = 2;
  int32 round = 3;
  int32 game_index = 4; // for matchplay type rounds etc.
  google.protobuf.Timestamp deadline = 5;
}

// RematchStartedEvent gets sent to a game for which there is a rematch.
// It notifies that observers of the game that a rematch has started.
message RematchStartedEvent {
  // rematch_game_id is the new game ID.
  string rematch_game_id = 1;
}

// A GameHistoryRefresher is sent to both players when the game starts,
// and any observers at the time that they begin observing. It can also be sent
// to a player who reconnects in the middle of a game.
message GameHistoryRefresher {
  // The history contains all the moves, points, as well as the last known racks
  // of each player. It also implicitly contains whose turn it is at the moment,
  // by the events / turns in the history.
  // The front-end is responsible for showing all this information in a nice
  // format.
  // Note: the racks of each player should not be sent to both players, only
  // to observers. The back-end will have to be smart enough to overwrite
  // this information with a blank string before sending it. It might not
  // even be that great of a big deal, as I'm sure people can devise other ways
  // to cheat, but shrug.
  macondo.GameHistory history = 1;
  // These represent how much time each player has remaining on their clock
  // as of the "refresher", in milliseconds.
  // player1 is the player who is listed first in the game history, regardless
  // of whether they went first.
  int32 time_player1 = 2;
  int32 time_player2 = 3;
  int32 max_overtime_minutes = 4;
  // outstanding_event refers to any possible outstanding game meta event that
  // has not yet been responded to or expired.
  GameMetaEvent outstanding_event = 5;
}

// A NewGameEvent gets sent from the server to the involved clients when a new
// game is about to begin. It should follow a SoughtGameProcessEvent.
message NewGameEvent {
  string game_id = 1;
  // These are the connection IDs of the requesting and accepting users.
  string requester_cid = 2;
  string accepter_cid = 3;
}

message ErrorMessage {
  string message = 1;
  // Maybe codes or something else in the future.
}

message ServerMessage { string message = 1; }

message ChatMessageDeleted {
  string channel = 1;
  string id = 2;
}

// Client-to-server messages

// Gameplay

enum GameEndReason {
  // NONE: the game has not yet ended!
  NONE = 0;
  // TIME: one person timed out (and lost)
  TIME = 1;
  // WENT_OUT: game ended regularly, with one person having zero tiles on their
  // rack.
  STANDARD = 2;
  // 6 consecutive zeroes ends the game.
  CONSECUTIVE_ZEROES = 3;
  RESIGNED = 4;
  // Aborted games are aborted by mutual agreement.
  ABORTED = 5;
  TRIPLE_CHALLENGE = 6;
  // CANCELLED means the game never started. Game start signal was not sent.
  CANCELLED = 7;
  // FORCE_FORFEIT is a way to force an opponent to take a loss if they left a
  // game early without resigning.
  FORCE_FORFEIT = 8;
}

// We encapsulate the game event here from the client's point of view. The
// server will validate that the event is permissible.
message ClientGameplayEvent {
  enum EventType {
    TILE_PLACEMENT = 0;
    PASS = 1;
    EXCHANGE = 2;
    CHALLENGE_PLAY = 3;
    RESIGN = 4;
  }

  EventType type = 1;
  string game_id = 2;
  // position coordinates, like H8 or G10. Only matters for TILE_PLACEMENT.
  string position_coords = 3;
  // tiles that are being played (or exchanged). The `.` character is used
  // for thru, and lowercase characters are used for blanks.
  string tiles = 4;
}

// This can be sent from the user to the tournament or vice-versa.
message ReadyForTournamentGame {
  string tournament_id = 1;
  string division = 2;
  int32 round = 3;
  string player_id = 4;
  int32 game_index = 5; // within a matchplay type tournament where several
                        // games share a round.
  bool unready = 6;     // if true, this is a NOT-ready message.
}

message TimedOut {
  string game_id = 1;
  string user_id = 2;
}

// When a Receiver declines a Seeker:
message DeclineMatchRequest { string request_id = 1; }

// Tournaments

enum TournamentGameResult {
  // NO_RESULT: the game is not over
  NO_RESULT = 0;
  WIN = 1;
  LOSS = 2;
  DRAW = 3;
  BYE = 4;
  FORFEIT_WIN = 5;
  FORFEIT_LOSS = 6;
  // ELIMINATED: player is eliminated in a bracket tournament
  ELIMINATED = 7;
}

enum PairingMethod {
  RANDOM = 0;
  ROUND_ROBIN = 1;
  KING_OF_THE_HILL = 2;
  ELIMINATION = 3;
  FACTOR = 4;
  INITIAL_FONTES = 5;
  SWISS = 6;
  QUICKPAIR = 7;
  MANUAL = 8;
  TEAM_ROUND_ROBIN = 9;
}

enum FirstMethod {
  MANUAL_FIRST = 0;
  RANDOM_FIRST = 1;
  AUTOMATIC_FIRST = 2;
}

message TournamentPerson {
  string id = 1;
  int32 rating = 2;
  bool suspended = 3;
}

message TournamentPersons {
  string id = 1;
  string division = 2;
  repeated TournamentPerson persons = 3;
}

message RoundControl {
  PairingMethod pairing_method = 1;
  FirstMethod first_method = 2;
  int32 games_per_round = 3;
  int32 round = 4;
  int32 factor = 5;
  int32 initial_fontes = 6;
  int32 max_repeats = 7;
  bool allow_over_max_repeats = 8;
  int32 repeat_relative_weight = 9;
  int32 win_difference_relative_weight = 10;
}

message DivisionControls {
  string id = 1;
  string division = 2;
  GameRequest game_request = 3;
  TournamentGameResult suspended_result = 4;
  int32 suspended_spread = 5;
  bool auto_start = 6;
  int32 spread_cap = 7;
  bool gibsonize = 8;
  int32 gibson_spread = 9;
  int32 minimum_placement = 10;
}

message TournamentGame {
  repeated int32 scores = 1;
  repeated TournamentGameResult results = 2;
  GameEndReason game_end_reason = 3;
  string id = 4;
}

message Pairing {
  repeated int32 players = 1;
  int32 round = 2;
  repeated TournamentGame games = 3; // can be a list, for elimination tourneys
  repeated TournamentGameResult outcomes = 4;
  repeated string ready_states = 5;
}

message PlayerStanding {
  string player_id = 1;
  int32 wins = 2;
  int32 losses = 3;
  int32 draws = 4;
  int32 spread = 5;
}

message RoundStandings { repeated PlayerStanding standings = 1; }

message DivisionPairingsResponse {
  string id = 1;
  string division = 2;
  repeated Pairing division_pairings = 3;
  map<int32, RoundStandings> division_standings = 4;
  map<string, int32> gibsonized_players = 5;
}

message DivisionPairingsDeletedResponse {
  string id = 1;
  string division = 2;
  int32 round = 3;
}

message PlayersAddedOrRemovedResponse {
  string id = 1;
  string division = 2;
  TournamentPersons players = 3;
  repeated Pairing division_pairings = 4;
  map<int32, RoundStandings> division_standings = 5;
}

message DivisionRoundControls {
  string id = 1;
  string division = 2;
  repeated RoundControl round_controls = 3;
  repeated Pairing division_pairings = 4;
  map<int32, RoundStandings> division_standings = 5;
}

message DivisionControlsResponse {
  string id = 1;
  string division = 2;
  DivisionControls division_controls = 3;
}

message TournamentDivisionDataResponse {
  string id = 1;
  string division = 2;
  TournamentPersons players = 3;
  map<int32, RoundStandings> standings = 4;
  map<string, Pairing> pairing_map = 5;
  DivisionControls controls = 6;
  repeated RoundControl round_controls = 7;
  int32 current_round = 8;
}

message FullTournamentDivisions {
  map<string, TournamentDivisionDataResponse> divisions = 1;
  bool started = 2;
}

message TournamentFinishedResponse { string id = 1; }

message TournamentDataResponse {
  string id = 1;
  string name = 2;
  string description = 3;
  string executive_director = 4;
  TournamentPersons directors = 5;
  bool is_started = 6;
  google.protobuf.Timestamp start_time = 7;
}

message TournamentDivisionDeletedResponse {
  string id = 1;
  string division = 2;
}

// Communication

// When we go to a new path in our SPA, we send a JoinPath. When we leave the
// path, we send an Unjoin realm. d
message JoinPath { string path = 1; }

message UnjoinRealm {}
