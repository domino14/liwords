syntax = "proto3";
package tournament_service;
option go_package = "github.com/domino14/liwords/rpc/api/proto/tournament_service";

import "api/proto/realtime/realtime.proto";
import "google/protobuf/timestamp.proto";

message StartRoundRequest {
  string tournament_id = 1;
  int32 round = 2;
}

enum TType {
  // A Standard tournament
  STANDARD = 0;
  // A new "clubhouse"
  CLUB = 1;
  // A club session or child tournament.
  CHILD = 2;
  // A legacy tournament
  LEGACY = 3;
}

message NewTournamentRequest {
  // If slug is not assigned, a random ID will be chosen.
  string slug = 1;
  string name = 2;
  string description = 3;
  repeated string director_usernames = 4;

  TType type = 5;
}

message TournamentMetadata {
  string id = 1;
  string name = 2;
  // description is the markdown information for the tournament on the
  // right-hand side
  string description = 3;
  string slug = 4;
  TType type = 5;
  // a caption that shows up for the tournament in various places.
  string disclaimer = 6;
  // tile_style if set is default
  string tile_style = 7;
  // board_style if set is default
  string board_style = 8;
  // for clubs (not tournaments) we want to be able to hard-code settings
  // if the following parameter is set.
  liwords.GameRequest default_club_settings = 9;
  // When setting the game request, some clubs would like some parameters
  // to be more freeform (for example, lexicon option or time setting).
  // The following parameter is a list of field names that are freeform.
  // The acceptable values are:
  // lexicon, time, challenge_rule, rating_mode, variant_name
  repeated string freeform_club_setting_fields = 10;
  // a simple password for this tournament. Without it you can't see what is
  // happening. Likely front-end only implementation, although password
  // will be at least hashed. For clubs that want to be more private.
  string password = 11;
  // a url to a logo in the metadata card, disclaimer card and center square.
  string logo = 12;
  // an override color for the gradient in the tournament info
  string color = 13;
}

message SetTournamentMetadataRequest { TournamentMetadata metadata = 1; }

message SingleRoundControlsRequest {
  string id = 1;
  string division = 2;
  int32 round = 3;
  liwords.RoundControl round_controls = 4;
}

message PairRoundRequest {
  string id = 1;
  string division = 2;
  int32 round = 3;
  bool overwrite_byes = 4;
  bool delete_pairings = 5;
}

message TournamentDivisionRequest {
  string id = 1;
  string division = 2;
}

message TournamentPairingRequest {
  string player_one_id = 1;
  string player_two_id = 2;
  int32 round = 3;
}

message TournamentPairingsRequest {
  string id = 1;
  string division = 2;
  repeated TournamentPairingRequest pairings = 3;
}

// TournamentResultOverrideRequest is sent when a score needs to be edited
// or added by a director. Note that player one and player two need to be
// the players that went first and second, respectively; otherwise,
// we will not be able to accurately track firsts/seconds.
message TournamentResultOverrideRequest {
  string id = 1;
  string division = 2;
  string player_one_id = 3;
  string player_two_id = 4;
  int32 round = 5;
  int32 player_one_score = 6;
  int32 player_two_score = 7;
  liwords.TournamentGameResult player_one_result = 8;
  liwords.TournamentGameResult player_two_result = 9;
  liwords.GameEndReason game_end_reason = 10;
  bool amendment = 11;
  int32 game_index = 12;
}

message TournamentStartRoundCountdownRequest {
  string id = 1;
  string division = 2;
  int32 round = 3;
  bool start_all_rounds = 4;
}

message TournamentResponse {}
message NewTournamentResponse {
  string id = 1;
  string slug = 2;
}

message GetTournamentMetadataRequest {
  // User must provide the ID, or the slug (but not both)
  string id = 1;
  string slug = 2;
}

message GetTournamentRequest { string id = 1; }

message FinishTournamentRequest { string id = 1; }

message TournamentMetadataResponse {
  TournamentMetadata metadata = 1;
  // directors are not part of the metadata. We decided to make those
  // individually addable/removable (See AddDirectors)
  repeated string directors = 2;
}

message RecentGamesRequest {
  // tournament id
  string id = 1;
  int32 num_games = 2;
  int32 offset = 3;
}

message RecentGamesResponse {
  repeated liwords.TournamentGameEndedEvent games = 1;
}

message UnstartTournamentRequest { string id = 1; }

message UncheckInRequest { string id = 1; }

message CheckinRequest { string id = 1; }

service TournamentService {
  rpc NewTournament(NewTournamentRequest) returns (NewTournamentResponse);
  rpc GetTournamentMetadata(GetTournamentMetadataRequest)
      returns (TournamentMetadataResponse);
  rpc GetTournament(GetTournamentRequest)
      returns (liwords.FullTournamentDivisions);
  rpc FinishTournament(FinishTournamentRequest) returns (TournamentResponse);
  rpc SetTournamentMetadata(SetTournamentMetadataRequest)
      returns (TournamentResponse);
  rpc PairRound(PairRoundRequest) returns (TournamentResponse);
  rpc SetSingleRoundControls(SingleRoundControlsRequest)
      returns (TournamentResponse);
  rpc SetRoundControls(liwords.DivisionRoundControls)
      returns (TournamentResponse);
  rpc SetDivisionControls(liwords.DivisionControls)
      returns (TournamentResponse);
  // Input to AddDirectors should be director usernames.
  rpc AddDirectors(liwords.TournamentPersons) returns (TournamentResponse);
  // Input to RemoveDirectors should be director usernames.
  rpc RemoveDirectors(liwords.TournamentPersons) returns (TournamentResponse);
  rpc AddDivision(TournamentDivisionRequest) returns (TournamentResponse);
  rpc RemoveDivision(TournamentDivisionRequest) returns (TournamentResponse);
  // Input to AddPlayers should be player usernames
  rpc AddPlayers(liwords.TournamentPersons) returns (TournamentResponse);
  // Input to RemovePlayers should be player usernames
  rpc RemovePlayers(liwords.TournamentPersons) returns (TournamentResponse);
  rpc SetPairing(TournamentPairingsRequest) returns (TournamentResponse);
  rpc SetResult(TournamentResultOverrideRequest) returns (TournamentResponse);
  rpc StartRoundCountdown(TournamentStartRoundCountdownRequest)
      returns (TournamentResponse);

  rpc RecentGames(RecentGamesRequest) returns (RecentGamesResponse);

  rpc CreateClubSession(NewClubSessionRequest) returns (ClubSessionResponse);
  rpc GetRecentClubSessions(RecentClubSessionsRequest)
      returns (ClubSessionsResponse);

  rpc UnstartTournament(UnstartTournamentRequest) returns (TournamentResponse);

  // Uncheck everyone in. Use this some time before the beginning of a session.
  rpc UncheckIn(UncheckInRequest) returns (TournamentResponse);
  // CheckIn allows players to check themselves in.
  rpc CheckIn(CheckinRequest) returns (TournamentResponse);
}

message NewClubSessionRequest {
  // date is the date of the session
  google.protobuf.Timestamp date = 1;
  string club_id = 2;
}

message ClubSessionResponse {
  // Note that club sessions are tournaments in our backend. We return
  // the created tournament ID here:
  string tournament_id = 1;
  // slug will look like /club/{club_name}/{date}. It should be
  // case-insensitive.
  string slug = 2;
}

message RecentClubSessionsRequest {
  // club_id
  string id = 1;
  int32 count = 2;
  int32 offset = 3;
}

message ClubSessionsResponse { repeated ClubSessionResponse sessions = 1; }
